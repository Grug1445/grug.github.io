<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[java jackson 转义json字符串，类字段不匹配异常解决方法]]></title>
      <url>http://grug.tech/2016/08/05/java-jackson-convert-json-with-no-class-fileds-match/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">mapper.getDeserializationConfig().set(</div><div class="line">DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java  遍历List查询修改，删除元素]]></title>
      <url>http://grug.tech/2016/07/26/java-ergodic-list-query-modify-delete-element/</url>
      <content type="html"><![CDATA[<h2 id="背景：遍历List-找出满足条件元素，并修改。"><a href="#背景：遍历List-找出满足条件元素，并修改。" class="headerlink" title="背景：遍历List,找出满足条件元素，并修改。"></a>背景：遍历List,找出满足条件元素，并修改。</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; integers = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</div><div class="line">        <span class="comment">//要求把元素=6的值修改为9</span></div><div class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</div><div class="line">            <span class="keyword">if</span> (integer == <span class="number">6</span>)</div><div class="line">                integer = <span class="number">9</span>;<span class="comment">//无效,因为只修改了integer变量值</span></div><div class="line">        &#125;</div><div class="line">        integers.stream().forEach(System.out::print);</div><div class="line">        System.out.println();</div><div class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</div><div class="line">            <span class="keyword">if</span> (integer == <span class="number">6</span>)</div><div class="line">                integers.set(integers.indexOf(integer), <span class="number">9</span>);<span class="comment">//有效</span></div><div class="line">        &#125;</div><div class="line">        integers.stream().forEach(System.out::print);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="背景：找出满足条件元素，并删除。"><a href="#背景：找出满足条件元素，并删除。" class="headerlink" title="背景：找出满足条件元素，并删除。"></a>背景：找出满足条件元素，并删除。</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; integers = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</div><div class="line">        <span class="comment">//要求把=6的元素删除</span></div><div class="line">        <span class="comment">/*for (Integer integer : integers) &#123;</span></div><div class="line">            if (integer == 6)</div><div class="line">                integers.remove(integer); //抛出java.util.ConcurrentModificationException</div><div class="line">        &#125;*/</div><div class="line">        integers.stream().forEach(System.out::print);</div><div class="line">        System.out.println();</div><div class="line"><span class="comment">//        integers.stream().filter(integer -&gt; integer==6).iterator().remove();//抛出 java.lang.UnsupportedOperationException: remove</span></div><div class="line">        Iterator&lt;Integer&gt; iterator=integers.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            Integer integer=iterator.next();</div><div class="line">            <span class="keyword">if</span>(integer==<span class="number">6</span>)</div><div class="line"><span class="comment">//                integers.remove(integer);//抛出java.util.ConcurrentModificationException</span></div><div class="line">                    iterator.remove();<span class="comment">//ok</span></div><div class="line">        &#125;</div><div class="line">        integers.stream().forEach(System.out::print);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java实现递归遍历多叉树]]></title>
      <url>http://grug.tech/2016/07/21/java-traversing-multi-tree/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">//一个简单的多叉树</span></div><div class="line">TreeNode &#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> parentId;</div><div class="line">    <span class="keyword">private</span> List&lt;TreeNode&gt; childList;</div><div class="line">&#125;</div><div class="line"><span class="comment">//递归遍历</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(List&lt;TreeNode&gt; treeNodes)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (treeNodes.isEmpty()) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RunTimeException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (TreeNode treeNode : treeNodes) &#123;</div><div class="line">        System.out.print(<span class="string">"node id is"</span>+treeNode.getId());</div><div class="line">        <span class="keyword">if</span> (treeNode.getChildList().size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            convert(treeNode.getChildList())</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh无密码登录]]></title>
      <url>http://grug.tech/2016/05/03/ssh-login-without-password/</url>
      <content type="html"><![CDATA[<p>设在A机器上无密码登录机器B.</p>
<p><strong>用ssh-keygen在A机器上创建公钥</strong></p>
<p>执行 ssh-keygen -t rsa</p>
<p>生产两个文件id_rsa和id_rsa.pub</p>
<p>根据名字可知，id_rsa.pub是公钥，</p>
<p>执行  pbcopy &lt; id_rsa.pub  把公钥内容拷贝到粘贴板。</p>
<p><strong>把A机器的id_rsa.pub内容拷贝到 B主目录下的.ssh/authorized_keys 文件中（文件没有则新建）</strong></p>
<p>设置authorized_keys 文件权限</p>
<p>执行 chmod 600 authorized_keys</p>
<p>设置.ssh文件夹权限</p>
<p>执行 chmod 700 -R .ssh</p>
<p><strong>在A机器ssh登录B机器，即可成功。</strong></p>
<p>如 用户名@B机器IP。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fedora下安装配置zsh shell]]></title>
      <url>http://grug.tech/2016/04/29/fedora-install-zsh-shell/</url>
      <content type="html"><![CDATA[<h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo dnf install zsh.x86_64</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost ~]$ cat /etc/shells </div><div class="line">/bin/sh</div><div class="line">/bin/bash</div><div class="line">/sbin/nologin</div><div class="line">/usr/bin/sh</div><div class="line">/usr/bin/bash</div><div class="line">/usr/sbin/nologin</div><div class="line">/usr/bin/zsh</div><div class="line">/bin/zsh <span class="comment">#这里已经安装成功zsh</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>
<p>当报更改用户属性失败：权限不足时，我们可以手动修改shell,在shell中 输入chsh 输入zsh的完整路径 /usr/bin/zsh  如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost ~]$ chsh </div><div class="line">正在更改 grug 的 shell。</div><div class="line">新 shell [/bin/bash]: /usr/bin/zsh</div><div class="line">密码：</div><div class="line">shell 已更改。</div></pre></td></tr></table></figure></p>
<h1 id="注销重新登录就可以看到效果，下面进行配置。"><a href="#注销重新登录就可以看到效果，下面进行配置。" class="headerlink" title="注销重新登录就可以看到效果，下面进行配置。"></a>注销重新登录就可以看到效果，下面进行配置。</h1><p>配置文件是home目录下的.zshrc文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">➜  ~ vim .zshrc</div></pre></td></tr></table></figure></p>
<p> 增加alias<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alias cls=&apos;clear&apos;</div><div class="line">alias ll=&apos;ls -l&apos;</div><div class="line">alias la=&apos;ls -a&apos;</div></pre></td></tr></table></figure></p>
<h1 id="安装插件autojump"><a href="#安装插件autojump" class="headerlink" title="安装插件autojump"></a>安装插件autojump</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">➜  git git <span class="built_in">clone</span> git://github.com/joelthelion/autojump.git</div><div class="line">➜  git <span class="built_in">cd</span> autojump </div><div class="line">➜  autojump git:(master) ./install.py</div></pre></td></tr></table></figure>
<p>按照提示，把下面的字符加入到.zshrc文件末尾 Please manually add the following line(s) to ~/.zshrc:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[[ -s /home/grug/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source /home/grug/.autojump/etc/profile.d/autojump.sh</div><div class="line">autoload -U compinit &amp;&amp; compinit -u</div></pre></td></tr></table></figure></p>
<h1 id="修改-zshrc文件中-plugins"><a href="#修改-zshrc文件中-plugins" class="headerlink" title="修改.zshrc文件中 plugins"></a>修改.zshrc文件中 plugins</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">plugins=(git textmate ruby autojump osx mvn gradle)</div></pre></td></tr></table></figure>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>请参考 <a href="http://macshuo.com/?p=676" target="_blank" rel="external">http://macshuo.com/?p=676</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac 下VirtualBox安装fedora-server-23]]></title>
      <url>http://grug.tech/2016/04/29/mac-virtualbox-install-fedora-server-23/</url>
      <content type="html"><![CDATA[<p>1 在mac下安装virtualBox，官网<a href="https://www.virtualbox.org/" target="_blank" rel="external">https://www.virtualbox.org/</a> 自行下载安装</p>
<a id="more"></a>
<p>2 在fedora官网下载fedora-server-23镜像 <a href="https://getfedora.org/zh_CN/server/" target="_blank" rel="external">https://getfedora.org/zh_CN/server/</a></p>
<p>3 vitraulbox 中安装feodra-server-23</p>
<ul>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-29%20%E4%B8%8B%E5%8D%885.40.07.png" alt=""></li>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-29%20%E4%B8%8B%E5%8D%885.40.41.png" alt=""></li>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-29%20%E4%B8%8B%E5%8D%885.40.59.png" alt=""></li>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-29%20%E4%B8%8B%E5%8D%885.41.23.png" alt=""></li>
<li><p>下面都是默认选项，一路点继续，完成。<br>4 配置虚拟机（<span style="color: #ff0000;">这里比较重要，主要是配置安装介质与网络</span>）</p>
</li>
<li><p>点击偏好设置    <img src="http://7xo8j7.com1.z0.glb.clouddn.com/config_virtualbox.png" alt=""></p>
</li>
<li>选择网络 <img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server%202016-04-295.57.08.png" alt="">如图设置</li>
<li>点击端口转发 <img src="http://7xo8j7.com1.z0.glb.clouddn.com/virtualbox_install_fedora_server2016-04-29pm5.58.04.png" alt=""> 如图设置，保存完成</li>
<li>设置新建虚拟机 <img src="http://7xo8j7.com1.z0.glb.clouddn.com/2016-04-296.02.19.png" alt="">如图设置网络</li>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/2016-04-29pm6.01.57.png" alt="">如图设置存储，选择下载好的fedora-server镜像 保存。</li>
<li>启动虚拟机，安装（过程略）</li>
<li>在mac下shell中，ssh 用户名@ip -p 端口号。如：ssh grug@172.16.33.139 -p 8000 输入密码登录成功。</li>
<li>也可在浏览器中输入<a href="https://172.16.33.139:9090/" target="_blank" rel="external">https://172.16.33.139:9090/</a> 在web端查看管理服务器<img src="http://7xo8j7.com1.z0.glb.clouddn.com/2016-04-29pm6.16.33.png" alt=""></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac 下安装homebrew,配置vim]]></title>
      <url>http://grug.tech/2016/03/31/mac-install-homebrew-and-config-vim/</url>
      <content type="html"><![CDATA[<p>在mac下工作开发，homebrew和vim都是不可缺少的工具，下面介绍Homebrew的安装和vim的配置方法（mac shell默认安装了vim，但是没有高亮语法）：</p>
<h1 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="配置vim"><a href="#配置vim" class="headerlink" title="配置vim"></a>配置vim</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">vim  ~/.vimrc</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&quot; Configuration file for vim</div><div class="line">set modelines=0         &quot; CVE-2007-2438</div><div class="line">&quot; Normally we use vim-extensions. If you want true vi-compatibility</div><div class="line">&quot; remove change the following statements</div><div class="line">set nocompatible        &quot; Use Vim defaults instead of 100% vi compatibility</div><div class="line">set backspace=2         &quot; more powerful backspacing</div><div class="line">set ai                  &quot; auto indenting</div><div class="line">set history=100         &quot; keep 100 lines of history</div><div class="line">set ruler               &quot; show the cursor position</div><div class="line">syntax on               &quot; syntax highlighting</div><div class="line">set hlsearch            &quot; highlight the last searched term</div><div class="line">filetype plugin on      &quot; use the file type plugins</div><div class="line">&quot; Don&apos;t write backup file if vim is being called by &quot;crontab -e&quot;</div><div class="line">au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</div><div class="line">&quot; Don&apos;t write backup file if vim is being called by &quot;chpass&quot;</div><div class="line">au BufWrite /private/etc/pw.* set nowritebackup nobackup</div></pre></td></tr></table></figure>
<p>保存退出</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java并发编程基础]]></title>
      <url>http://grug.tech/2016/03/16/java-concurrent-programming-foundation/</url>
      <content type="html"><![CDATA[<p>本文是《java并发编程的艺术》 第4章 Java并发编程基础 学习笔记</p>
<h1 id="1线程简介"><a href="#1线程简介" class="headerlink" title="1线程简介"></a>1线程简介</h1><ul>
<li>现代操作系统调度的最小单元是线程，也叫轻量级里程，在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</li>
<li>设置线程的优先级时，针对频繁阻塞的线程需要设置较高的优先级，面偏重计算的线程则设置较低的优先级，确保处理器不会被独占。在不同的jvm及操作系统上，线程规划会存在差异，有些操作系统甚至会忽略对线程优先级的设定。</li>
<li>线程优先级不能作为程序正确性的依赖。</li>
<li>线程六种状态：<span style="color: #ff0000;">NEW(初始),RUNNABLE（就绪和运行统称运行）,BLOCKED(阻塞)，WAITING(等待)，TIME_WAITING(超时等待)，TERMINATED(终止)。</span></li>
<li>线程创建之后，调用start()方法开始运行。当线程执行wait()方法之后，线程进入等待状态。进入等待状态的线程需要依靠其他线程的通知才能返回到运行状态，而超时等待状态相当于在等待状态的基础上增加了超时限制，也就是超时时间到达时将会返回到运行状态。当线程调用同步方法，在没有获取到锁的情况下，线程将会进入到阻塞状态。线程在执行Runnable()的run()方法之后将会进入到终止状态。<a id="more"></a>
</li>
</ul>
<h1 id="2启动和终止线程"><a href="#2启动和终止线程" class="headerlink" title="2启动和终止线程"></a>2启动和终止线程</h1><ul>
<li>线程start() 方法：当前线程同步告知java虚拟机，只要线程规划器空闲，应立即启动调用start()方法的线程。</li>
<li>中断是一个线程的标识位属性，表示一个运行中的线程是否被其它线程进行了中断操作。中断好比其它线程对该线程打了个招呼，其它线程通过调用该线程的interrupt()方法对其进行中断操作。</li>
<li>线程通过检查自身是否被中断来进行响应，线程通过方法isInterrupted()来进行判断是否被中断，也可以调用静态方法Thread.interrupted()对当前线程的中断标识位进行复位。<span style="color: #ff0000;">如果该线程已经处于终止状态，即使该线程被中断过，在调用该线程对象的isInterrupted()时依旧返回false。</span></li>
<li>除了中断以外，还可以利用一个boolean变量来控制是否需要停止任务并终止该线程。</li>
<li><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20160314java-thread-status.jpg" alt="">(图侵册)</li>
</ul>
<h1 id="3线程间通信"><a href="#3线程间通信" class="headerlink" title="3线程间通信"></a>3线程间通信</h1><ul>
<li>关键字volatile可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的可见性。</li>
<li>关键字synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排它性。</li>
<li>对于同步块的实现使用了monitorenter和monitorexit指令，而同步方法则依靠方法修饰符上的ACC_SYNCHRONIZED来完成的。无论采用哪种方式，<span style="text-decoration: underline;">其本质是对一个对象的监视器（monitor）进行获取</span>，而这个获取过程是排化的，也就是同一时刻只能有一个线程获取到由synchronized所保护对象的监视器。</li>
<li>任何一个对象都有自己的监视器，当这个对象被同步块或者同步方法调用时，执行方法的线程必须先获取到该对象的监视器才能进入同步块或者同步方法，而没有获取的线程将会被阻塞在同步块或者同步方法的入口处，进入Blocked状态。</li>
<li>等待/通知机制，批一个线程A调用了对象O的wait()方法进入等待状态，而另一个线程B调用了对象O的notify()或者notifyAll()方法，线程A收到通知后从对象O的wait()方法返回，进而执行后续操作。</li>
</ul>
<ol>
<li>使用wait(),notify(),notifyAll()时需要先对调用对象加锁。</li>
<li>调用wait()后，当前线程状态由running-&gt;waiting,当前线程-&gt;对象的等待队列。</li>
<li>调用notify(),notifyAll()后，等待线程不会立即返回，要等待当前线程释放锁之后，等待线程才有机会从wait()中返回。</li>
<li>notify():把等待队列中一个线程移动到同步队列中，notifyAll():把所有等待队列中线程移动到同步队列。并将线程的状态由waiting修改为blocked.</li>
<li>要想从wait()返回，就是获取对象的锁。</li>
</ol>
<ul>
<li>等待/通知的经典范式:消费者（等待者）—-获取对象的锁-&gt;如果条件不满足，则调用对象的wait()方法，被通知后仍要检查条件–&gt;条件满足则执行对应的逻辑。生产者（通知者）—-获取对象的锁-&gt;改变条件-&gt;通知所有等待在对象上的线程。</li>
<li>Thread.join()–如果一个线程A执行了thread.join()语句，其含义是:当前线程A等待thread线程终止之后才从thread.join()返回。</li>
<li>ThreadLocal–线程变量，是一个以ThreadLocal对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个线程上的一个值。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java内存模型学习整理]]></title>
      <url>http://grug.tech/2016/03/10/java-memory-model-study/</url>
      <content type="html"><![CDATA[<p>本文是《java并发编程的艺术》 第3章java内存模型 学习整理笔记</p>
<p>文章见于 <a href="http://ifeve.com/java-memory-model-0/" target="_blank" rel="external">并发编程网-深入理解java内存模型系列文章</a></p>
<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h1><ul>
<li>java并发采用的是共享内存模型。</li>
<li>Java中，所有实例域，静态域和数组元素都存储在堆内存中，堆内存在线程之间共享。</li>
<li>线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。</li>
<li>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。</li>
<li>JMM(java memory model)属于语言级的内存模型，通过禁止特定类型的编译器重排序和处理器重排序，在不同的编译器和不同的处理器平台上，为程序员提供一致的内存可见性保证。</li>
<li>处理器使用写缓冲区临时保存向内存写入的数据，通过批处理的方式刷新写缓冲区，且仅对它所在的处理器可见。</li>
<li><span style="color: #ff0000;">happens-before 规则1 程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。 2 监视器锁规则：对一个锁的解锁，happen-before于随后对这个锁的加锁。 3 volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。4 传递性规则：如果A heppens-before B,且B happens-before C,则 A heppens-beofore C。</span></li>
<li><p><strong>两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行。</strong></p>
<a id="more"></a>
<h1 id="2-重排序"><a href="#2-重排序" class="headerlink" title="2 重排序"></a>2 重排序</h1></li>
<li><p>编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。</p>
</li>
<li>as-if-serial语义：不管怎么重排序，（单线程）程序的执行结果不能被改变。它把单线程程序保护了起来。</li>
<li>数据竞争：在一个线程中写一个变量，在另一个线程中读同一个变量，且写和读没有通过同步来排序。</li>
<li>JMM保证：如果程序是正确同步的，程序的执行将具有顺序一致性-即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。</li>
</ul>
<h1 id="3顺序一致性"><a href="#3顺序一致性" class="headerlink" title="3顺序一致性"></a>3顺序一致性</h1><ul>
<li>顺序一致性内存模型中的每个操作必须立即对任意线程可见。</li>
<li>未同步的程序在JMM中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可以不一致。</li>
<li><span style="color: #ff0000;">未同步或未正确同步的多线程程序，JMM提供最小安全性：线程执行时读取到的值，要么是之前某个线程写入的值 ，要么是默认值（0，Null,False）,JMM保证线程读操作读取到的值不会无中生有的冒出来。</span></li>
<li><strong>JMM不保证对64位的long型和double型变量的写操作具有原子性。</strong></li>
</ul>
<h1 id="4-volatile内存语义"><a href="#4-volatile内存语义" class="headerlink" title="4 volatile内存语义"></a>4 volatile内存语义</h1><ul>
<li>volatile,可见性–对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。原子性–对任意单个volatile变量的读/写具有原子性，但类似于volatile++等复合操作不具有原子性。</li>
<li>写_<strong>一个</strong><em>volatile变量，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存中。读</em><strong>一个</strong>_volatile变量，JMM会把该线程对应的本地内存置为无效，从主内存中读取共享变量。</li>
<li>volatile仅仅保证对单个volatile变量的读/写有原子性，而锁的互斥执行可以确保对整个临界区代码的执行具有原子性。</li>
<li>在功能上，锁比volatile更强大;在可伸缩性和执行性能上，volatile更有优势。</li>
</ul>
<h1 id="5-锁的内存语义"><a href="#5-锁的内存语义" class="headerlink" title="5 锁的内存语义"></a>5 锁的内存语义</h1><ul>
<li>当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。</li>
<li>当线程获取锁时，JMM会把该线程对应的本地内存置为无效。从而使被监视器保护的临界区代码必须从主内存中读取共享变量。</li>
<li><span style="color: #ff0000;">锁释放与volatile写具有相同的内存语义；锁获取与volatile读有相同的内存语义。</span></li>
<li>compareAndSet()-CAS:如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。<strong>操作具有volatile读和写的内存语义。</strong></li>
<li>volatile变量的读/写和CAS可以实现线程之间的通信，即整个concurrent包的实现基石。</li>
<li>concurrent 包中代码的一种实现模式：<strong>1</strong> 声明共享变量为volatile。<strong> 2</strong> 使用CAS的原子条件更新来实现线程之间的同步。 <strong>3</strong> 配合以volitale的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信。</li>
</ul>
<h1 id="6-final域的内存语义"><a href="#6-final域的内存语义" class="headerlink" title="6 final域的内存语义"></a>6 final域的内存语义</h1><ul>
<li>写final域的重排序规则可以确保：在对象引用任意线程可见之前，对象的final域已经被正确初始化了，而普通域不具有这个保障。</li>
<li>读final域的重排序规则可以确保：在读一个对象的final域之前，一定会先读包含这个final域的对象的引用。</li>
<li><span style="color: #ff0000;">只要对象是正确构造的（被构造对象的引用在构造函数中没有“逸出”），那么不需要使用同步（指lock和volatile的使用）就可以保证任意线程都能看到这个final域在构造函数中被初始化之后的值。</span></li>
</ul>
<h1 id="7-happens-before"><a href="#7-happens-before" class="headerlink" title="7 happens-before"></a>7 happens-before</h1><ul>
<li>JMM对程序员的承诺：如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li>
<li>JMM对编译器和处理器重排序的约束原则：两个操作之间存在happens-before关系，并不意味着java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法（即允许这种重排序）。</li>
<li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li>
<li>happens-before规则：start()规则–如果线程A执行操作ThreadB.start()(启动线程B),那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。  join()规则：如果线程A执行操作ThredB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。 执行ThreadB.join()是等待线程B的终止，同时，如果线程B在终止之前修改了一些共享变量，线程A从ThreadB.join()返回后会读这些共享变量。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个线程安全的计数器]]></title>
      <url>http://grug.tech/2016/03/08/a-thread-safe-counter/</url>
      <content type="html"><![CDATA[<p>synchronized实现同步的基础：每个对象都可以是锁;</p>
<ul>
<li>对于方法锁是当前实例对象</li>
<li>对于静态方法，锁是当前类Class对象</li>
<li>对于方法块，锁是synchonized括号里配置的对象<a id="more"></a></li>
</ul>
<ol>
<li>代码块同步是使用monitorenter和monitorexit指令实现。</li>
<li>锁有4种状态，无锁状态&lt;偏向锁&lt;轻量级锁&lt;重量级锁,状态会随着竞争逐渐升级。</li>
<li>锁可以升级，但是不能降级。为了提高获锁和释放锁的效率。</li>
<li>偏向锁只有等竞争出现才释放锁。</li>
<li>处理器通过两种方法实现原子操作，a,通过总线锁保证原子性。b,通过缓存锁保证原子性。</li>
<li>cas实现原子操作问题a,ABA问题。b循环时间长开销大。c,只能保证一个共享变量的原子操作。</li>
</ol>
<p>代码来源《java并发编程的艺术》，第2章</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger=<span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">final</span>  Counter cas =<span class="keyword">new</span> Counter();</div><div class="line">        List ts=<span class="keyword">new</span> ArrayList(<span class="number">600</span>);</div><div class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&amp;lt;<span class="number">100</span>;j++)&#123;</div><div class="line">            Thread t=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">1000</span>;i++)&#123;</div><div class="line">                       cas.count();</div><div class="line">                       cas.safeCount();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            ts.add(t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(Thread t:ts)&#123;</div><div class="line">            t.start();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(Thread t:ts)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                t.join();</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println(cas.i);</div><div class="line">        System.out.println(cas.atomicInteger);</div><div class="line">        System.out.println(System.currentTimeMillis()-start);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//使用cas实现线程安全计数器</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeCount</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(;;)&#123;</div><div class="line">            <span class="keyword">int</span> i=atomicInteger.get();</div><div class="line">            <span class="keyword">boolean</span> suc=atomicInteger.compareAndSet(i,++i);</div><div class="line">            <span class="keyword">if</span>(suc)&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//非线程安全计数器</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[死锁实例与避免死锁的方法]]></title>
      <url>http://grug.tech/2016/03/08/deadlock-avoid/</url>
      <content type="html"><![CDATA[<p>文章用来记录学习《java并发编程的艺术》手记</p>
<p>死锁</p>
<p>eg,<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String A=<span class="string">"A"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String B=<span class="string">"B"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">            <span class="keyword">new</span> DeadLockDemo().deadLock();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span></span>&#123;</div><div class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (A)&#123;</div><div class="line">                    <span class="keyword">try</span>&#123;</div><div class="line">                        Thread.currentThread().sleep(<span class="number">2000</span>);</div><div class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">synchronized</span> (B)&#123;</div><div class="line">                        System.out.println(<span class="string">"1"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (B)&#123;</div><div class="line">                    <span class="keyword">synchronized</span> (A)&#123;</div><div class="line">                        System.out.println(<span class="string">"2"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>避免死锁的常见方法<br><a id="more"></a></p>
<ol>
<li>避免一个线程同时获取多个锁。</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>
<li>对于数据库锁，加锁和解锁要在一个数据库连接里，否则会出现解锁失败。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis 事务管理]]></title>
      <url>http://grug.tech/2016/02/01/redis-transaction/</url>
      <content type="html"><![CDATA[<h1 id="redis事务相关命令"><a href="#redis事务相关命令" class="headerlink" title="redis事务相关命令"></a>redis事务相关命令</h1><p>来源<a href="http://redis.cn/commands.html" target="_blank" rel="external">http://redis.cn/commands.html</a></p>
<p><strong>watch key</strong></p>
<p>标记所有指定的key 被监视起来，在事务中有条件的执行（乐观锁）。</p>
<p><strong>unwatch key</strong></p>
<p>刷新一个事务中已被监视的所有key。如果执行EXEC 或者DISCARD， 则不需要手动执行UNWATCH 。</p>
<p><strong>multi</strong></p>
<p>标记一个事务块的开始。 随后的指令将在执行EXEC时作为一个原子执行。</p>
<p><strong>exec</strong></p>
<p>执行事务中所有在排队等待的指令并将链接状态恢复到正常 当使用WATCH 时，只有当被监视的键没有被修改，且允许检查设定机制时，EXEC会被执行</p>
<p>返回值<br><a id="more"></a></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get a</div><div class="line"><span class="string">"1"</span></div><div class="line">127.0.0.1:6379&gt; WATCH a</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a 2   <span class="comment">#这里a的值已经改变</span></div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; MULTI  <span class="comment">#标记事务开始</span></div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a 3  <span class="comment">#因为a的值已经改变，这条命令不会执行</span></div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; EXEC  <span class="comment">#执行命令，这里执行失败</span></div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt; get a   <span class="comment">#取得的依然是事务之前的</span></div><div class="line"><span class="string">"2"</span></div></pre></td></tr></table></figure>
<h1 id="java实现（spring-data-redis）"><a href="#java实现（spring-data-redis）" class="headerlink" title="java实现（spring-data-redis）"></a>java实现（spring-data-redis）</h1><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SessionCallback transactionalSessionCallback= <span class="keyword">new</span> SessionCallback() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</div><div class="line"><span class="keyword">if</span>(operations.hasKey(key))&#123;<span class="comment">//是否有key</span></div><div class="line">   operations.watch(key);<span class="comment">//监听一个key</span></div><div class="line">&#125;</div><div class="line">operations.multi();</div><div class="line">operations.opsForValue().set(key, <span class="keyword">new</span> Object());</div><div class="line">operations.expire(key, EXPIRE_TIME, TimeUnit.MINUTES);<span class="comment">//redis有效期</span></div><div class="line">List&lt;Object&gt; objects= operations.exec();<span class="comment">//这里只返回一个"true"</span></div><div class="line"><span class="keyword">if</span>(!objects.get(<span class="number">0</span>).equals(<span class="keyword">true</span>))&#123;</div><div class="line">operations.discard();<span class="comment">//回滚</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Object();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">getRedisTemplate().execute(transactionalSessionCallback);</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line"><span class="comment">//other code</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Collections.sort()用法总结]]></title>
      <url>http://grug.tech/2016/01/25/collections-sort/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsSortTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</div><div class="line">        Long[] longs=&#123;<span class="number">2L</span>,<span class="number">4L</span>,<span class="number">35L</span>,<span class="number">837L</span>,<span class="number">5L</span>,<span class="number">11L</span>,<span class="number">2L</span>,<span class="number">0L</span>,-<span class="number">1L</span>,<span class="number">22L</span>&#125;;</div><div class="line">        List list= Arrays.asList(longs);</div><div class="line">       Collections.sort(list);<span class="comment">//默认排序，升序。本接口list排序的类（比如示例的Long）要实现Comparable接口</span></div><div class="line">       Collections.sort(list,<span class="keyword">new</span> Comparator() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Long o1, Long o2)</span> </span>&#123;</div><div class="line">                <span class="comment">//if(o1&amp;gt;o2) return -1; else return 1//降序</span></div><div class="line">                <span class="comment">// if(o1&amp;lt;o2) return -1; else return 1 //升序 //if(o1&lt;o2) return 1;  else return -1  //升序</span></div><div class="line">                <span class="comment">//降序</span></div><div class="line">                <span class="keyword">if</span>(o1&amp;lt;o2)  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span>(Long l:list)&#123;</div><div class="line">            System.out.print(l+<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//java 8更新</span></div><div class="line">List.sort((o1,o2)-&gt;Integer.compare(o1,o2));</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux增加删除用户和组]]></title>
      <url>http://grug.tech/2016/01/21/linux-add-user-group/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># groupadd word  #增加组</span></div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># groupdel word  #删除组</span></div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># groupadd work  </span></div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># gpasswd -a glovee work  #增加用户glovee 到work组</span></div><div class="line">Adding user glovee to group work</div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># useradd -g work -d /home/happy happy  #增加用户happy并分配到work组</span></div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># passwd happy #修改用户密码</span></div><div class="line">Changing password <span class="keyword">for</span> user happy.</div><div class="line">New password:</div><div class="line">Retype new password:</div><div class="line">passwd: all authentication tokens updated successfully.</div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># gpasswd -a life work  #增加已经存在的用户life到work组</span></div><div class="line">Adding user life to group work</div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># gpasswd -d life work  #从work组中删除用户life</span></div><div class="line">Removing user happy from group work</div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># userdel life  #删除用户life</span></div><div class="line">[root@iZ11x0ac03hZ ~]<span class="comment"># adduser test2  #只增加用户test2</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis connection refuse（拒绝接连）问题解决]]></title>
      <url>http://grug.tech/2016/01/20/redis-connection-refuse/</url>
      <content type="html"><![CDATA[<p>可能的问题</p>
<ol>
<li>redis配置问题，只绑定了本地。注释  bind 127.0.0.0 就可解决。</li>
<li>配置文件的问题，如本次官网app的原因是，dubbo服务启动时读取的配置是config/application-<em>.xml，但是依赖的jar包中也存在同样的文件目录，jar包中的配置redis地址是localhost,这时dubbo启动时可能会读取jar中的配置文件，而忽略真正的配置文件，就会报“拒绝连接”。重命名配置文件目录，如修改为conf，修改dubbo启动是加载conf/application-</em>.xml，就可解决问题。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql常用命令]]></title>
      <url>http://grug.tech/2016/01/19/mysql-command/</url>
      <content type="html"><![CDATA[<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p><strong>create database &lt;数据库名&gt;</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">create database <span class="built_in">test</span>;</div></pre></td></tr></table></figure></p>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><p><strong>drop database &lt;数据库名&gt;</strong></p>
<a id="more"></a>
<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p><strong>use &lt;数据库名&gt;</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">use <span class="built_in">test</span>;</div></pre></td></tr></table></figure></p>
<h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><p><strong>create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">create table user(id int(4) not null primary key auto_increment,name char(20) not null,sex int(1) not null default <span class="string">'0'</span>);</div></pre></td></tr></table></figure></p>
<h1 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h1><p><strong>drop table &lt;表名&gt;;</strong></p>
<h1 id="表中插入数据"><a href="#表中插入数据" class="headerlink" title="表中插入数据"></a>表中插入数据</h1><p><strong>insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; insert into user values (1,<span class="string">'tom'</span>,0),(2,<span class="string">'jack'</span>,0),(3,<span class="string">'penny'</span>,1);</div><div class="line">Query OK, 3 rows affected (0.05 sec)</div><div class="line">Records: 3 Duplicates: 0 Warnings: 0</div></pre></td></tr></table></figure></p>
<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p><strong>select &lt;字段1，字段2，…&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user;</div><div class="line">+----+-------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+-------+-----+</div><div class="line">| 1 | tom | 0 |</div><div class="line">| 2 | jack | 0 |</div><div class="line">| 3 | penny | 1 |</div><div class="line">+----+-------+-----+</div><div class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>以id倒序<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user order by id desc;</div><div class="line">+----+-------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+-------+-----+</div><div class="line">| 3 | penny | 1 |</div><div class="line">| 2 | jack | 0 |</div><div class="line">| 1 | tom | 0 |</div><div class="line">+----+-------+-----+</div><div class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>结果限制数量<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user order by id desc <span class="built_in">limit</span> 0,2;</div><div class="line">+----+-------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+-------+-----+</div><div class="line">| 3 | penny | 1 |</div><div class="line">| 2 | jack | 0 |</div><div class="line">+----+-------+-----+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<h1 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h1><p><strong>delete from 表名 where 表达式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; delete from user <span class="built_in">where</span> id = 1;</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from user;</div><div class="line">+----+-------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+-------+-----+</div><div class="line">| 2 | jack | 0 |</div><div class="line">| 3 | penny | 1 |</div><div class="line">+----+-------+-----+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<h1 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据"></a>修改表中数据</h1><p><strong>update 表名 set 字段=新值,… where 条件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user;</div><div class="line">+----+-------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+-------+-----+</div><div class="line">| 2 | jack | 0 |</div><div class="line">| 3 | penny | 1 |</div><div class="line">+----+-------+-----+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div><div class="line">mysql&gt; update user <span class="built_in">set</span> name=<span class="string">'grug'</span> <span class="built_in">where</span> id =3;</div><div class="line">Query OK, 1 row affected (0.03 sec)</div><div class="line">Rows matched: 1 Changed: 1 Warnings: 0</div><div class="line"></div><div class="line">mysql&gt; select * from user;</div><div class="line">+----+------+-----+</div><div class="line">| id | name | sex |</div><div class="line">+----+------+-----+</div><div class="line">| 2 | jack | 0 |</div><div class="line">| 3 | grug | 1 |</div><div class="line">+----+------+-----+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure>
<h1 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h1><p><strong>alter table</strong> 表名 <strong>add</strong>字段 类型 其他;<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; alter table user add age int(2) default 0;</div><div class="line">mysql&gt; select * from user;</div><div class="line">+----+------+-----+------+</div><div class="line">| id | name | sex | age |</div><div class="line">+----+------+-----+------+</div><div class="line">| 2 | jack | 0 | 0 |</div><div class="line">| 3 | grug | 1 | 0 |</div><div class="line">+----+------+-----+------+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><strong>加索引</strong><br>mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);<br>例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; alter table user add index index_name(name);</div></pre></td></tr></table></figure></p>
<p><strong>加主关键字的索引</strong><br>mysql&gt; alter table 表名 add primary key (字段名);<br>例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; alter table user add primary key(id);</div></pre></td></tr></table></figure></p>
<p><strong>加唯一限制条件的索引</strong><br>mysql&gt; alter table 表名 add unique 索引名 (字段名);<br>例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; alter table user add unique emp_name2(age);</div></pre></td></tr></table></figure></p>
<p><strong>删除某个索引</strong><br>mysql&gt; alter table 表名 drop index 索引名;<br>例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt;alter table user drop index emp_name;</div></pre></td></tr></table></figure></p>
<p><strong>增加字段：</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE table_name ADD field_name field_type;</div></pre></td></tr></table></figure></p>
<p><strong>修改原字段名称及类型：</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;</div></pre></td></tr></table></figure></p>
<p><strong>删除字段：</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">MySQL ALTER TABLE table_name DROP field_name;</div></pre></td></tr></table></figure></p>
<h1 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h1><p><strong>rename table 原表名 to 新表名;</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; rename table user to new_user;</div><div class="line">Query OK, 0 rows affected (0.03 sec)</div><div class="line">mysql&gt; select * from new_user;</div><div class="line">+----+------+-----+------+</div><div class="line">| id | name | sex | age |</div><div class="line">+----+------+-----+------+</div><div class="line">| 2 | jack | 0 | 0 |</div><div class="line">| 3 | grug | 1 | 0 |</div><div class="line">+----+------+-----+------+</div><div class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fedora安装配置mysql]]></title>
      <url>http://grug.tech/2016/01/19/fedora-install-config-mysql/</url>
      <content type="html"><![CDATA[<h1 id="1dnf直接安装mysql安装包（dnf和yum类似）"><a href="#1dnf直接安装mysql安装包（dnf和yum类似）" class="headerlink" title="1dnf直接安装mysql安装包（dnf和yum类似）"></a>1dnf直接安装mysql安装包（dnf和yum类似）</h1><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost ~]$ sudo dnf install community-mysql-server.x86_64 community-mysql.x86_64 community-mysql-devel.x86_64</div><div class="line">[sudo] grug 的密码：</div><div class="line">上次元数据过期检查在 0:53:05 前执行于 Tue Jan 19 10:31:34 2016。</div><div class="line">依赖关系解决。</div><div class="line">==============================================================================================================================================================================================================================================================================</div><div class="line">Package 架构 版本 仓库 大小</div><div class="line">==============================================================================================================================================================================================================================================================================</div><div class="line">安装:</div><div class="line">community-mysql x86_64 5.6.27-1.fc23 updates 6.4 M</div><div class="line">community-mysql-common x86_64 5.6.27-1.fc23 updates 88 k</div><div class="line">community-mysql-devel x86_64 5.6.27-1.fc23 updates 219 k</div><div class="line">community-mysql-errmsg x86_64 5.6.27-1.fc23 updates 258 k</div><div class="line">community-mysql-libs x86_64 5.6.27-1.fc23 updates 649 k</div><div class="line">community-mysql-server x86_64 5.6.27-1.fc23 updates 11 M</div><div class="line">mariadb-common x86_64 1:10.0.21-1.fc23 updates 74 k</div><div class="line">mariadb-config x86_64 1:10.0.21-1.fc23 updates 25 k</div><div class="line">mariadb-libs x86_64 1:10.0.21-1.fc23 updates 637 k</div><div class="line">perl-DBD-MySQL x86_64 4.033-1.fc23 updates 153 k</div><div class="line">perl-DBI x86_64 1.633-6.fc23 fedora 727 k</div><div class="line">perl-Data-Dumper x86_64 2.158-347.fc23 fedora 55 k</div><div class="line">perl-Math-BigInt noarch 1.9997-349.fc23 fedora 188 k</div><div class="line"></div><div class="line">事务概要</div><div class="line">==============================================================================================================================================================================================================================================================================</div><div class="line">安装 13 Packages</div><div class="line"></div><div class="line">总下载：20 M</div><div class="line">安装大小：106 M</div><div class="line">确定吗？[y/N]：y</div><div class="line">下载软件包：</div><div class="line">(1/13): perl-Data-Dumper-2.158-347.fc23.x86_64.rpm 37 kB/s | 55 kB 00:01</div><div class="line">(2/13): community-mysql-common-5.6.27-1.fc23.x86_64.rpm 131 kB/s | 88 kB 00:00</div><div class="line">(3/13): community-mysql-errmsg-5.6.27-1.fc23.x86_64.rpm 88 kB/s | 258 kB 00:02</div><div class="line">(4/13): perl-DBI-1.633-6.fc23.x86_64.rpm 71 kB/s | 727 kB 00:10</div><div class="line">(5/13): community-mysql-devel-5.6.27-1.fc23.x86_64.rpm 170 kB/s | 219 kB 00:01</div><div class="line">(6/13): community-mysql-libs-5.6.27-1.fc23.x86_64.rpm 186 kB/s | 649 kB 00:03</div><div class="line">(7/13): perl-Math-BigInt-1.9997-349.fc23.noarch.rpm 58 kB/s | 188 kB 00:03</div><div class="line">(8/13): mariadb-config-10.0.21-1.fc23.x86_64.rpm 51 kB/s | 25 kB 00:00</div><div class="line">(9/13): perl-DBD-MySQL-4.033-1.fc23.x86_64.rpm 50 kB/s | 153 kB 00:03</div><div class="line">(10/13): mariadb-libs-10.0.21-1.fc23.x86_64.rpm 60 kB/s | 637 kB 00:10</div><div class="line">(11/13): mariadb-common-10.0.21-1.fc23.x86_64.rpm 55 kB/s | 74 kB 00:01</div><div class="line">(12/13): community-mysql-server-5.6.27-1.fc23.x86_64.rpm 227 kB/s | 11 MB 00:49</div><div class="line">(13/13): community-mysql-5.6.27-1.fc23.x86_64.rpm 127 kB/s | 6.4 MB 00:51</div><div class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</div><div class="line">总计 347 kB/s | 20 MB 00:59</div><div class="line">运行事务检查</div><div class="line">事务检查成功。</div><div class="line">运行事务测试</div><div class="line">事务测试成功。</div><div class="line">运行事务</div><div class="line">安装: mariadb-config-1:10.0.21-1.fc23.x86_64 1/13</div><div class="line">安装: community-mysql-common-5.6.27-1.fc23.x86_64 2/13</div><div class="line">安装: perl-Data-Dumper-2.158-347.fc23.x86_64 3/13</div><div class="line">安装: community-mysql-errmsg-5.6.27-1.fc23.x86_64 4/13</div><div class="line">安装: community-mysql-5.6.27-1.fc23.x86_64 5/13</div><div class="line">安装: community-mysql-libs-5.6.27-1.fc23.x86_64 6/13</div><div class="line">安装: mariadb-common-1:10.0.21-1.fc23.x86_64 7/13</div><div class="line">安装: mariadb-libs-1:10.0.21-1.fc23.x86_64 8/13</div><div class="line">安装: perl-Math-BigInt-1.9997-349.fc23.noarch 9/13</div><div class="line">安装: perl-DBI-1.633-6.fc23.x86_64 10/13</div><div class="line">安装: perl-DBD-MySQL-4.033-1.fc23.x86_64 11/13</div><div class="line">安装: community-mysql-server-5.6.27-1.fc23.x86_64 12/13</div><div class="line">安装: community-mysql-devel-5.6.27-1.fc23.x86_64 13/13</div><div class="line">验证: community-mysql-server-5.6.27-1.fc23.x86_64 1/13</div><div class="line">验证: perl-DBI-1.633-6.fc23.x86_64 2/13</div><div class="line">验证: perl-Data-Dumper-2.158-347.fc23.x86_64 3/13</div><div class="line">验证: community-mysql-common-5.6.27-1.fc23.x86_64 4/13</div><div class="line">验证: community-mysql-errmsg-5.6.27-1.fc23.x86_64 5/13</div><div class="line">验证: community-mysql-5.6.27-1.fc23.x86_64 6/13</div><div class="line">验证: community-mysql-devel-5.6.27-1.fc23.x86_64 7/13</div><div class="line">验证: community-mysql-libs-5.6.27-1.fc23.x86_64 8/13</div><div class="line">验证: perl-Math-BigInt-1.9997-349.fc23.noarch 9/13</div><div class="line">验证: mariadb-config-1:10.0.21-1.fc23.x86_64 10/13</div><div class="line">验证: perl-DBD-MySQL-4.033-1.fc23.x86_64 11/13</div><div class="line">验证: mariadb-libs-1:10.0.21-1.fc23.x86_64 12/13</div><div class="line">验证: mariadb-common-1:10.0.21-1.fc23.x86_64 13/13</div><div class="line"></div><div class="line">已安装:</div><div class="line">community-mysql.x86_64 5.6.27-1.fc23 community-mysql-common.x86_64 5.6.27-1.fc23 community-mysql-devel.x86_64 5.6.27-1.fc23 community-mysql-errmsg.x86_64 5.6.27-1.fc23 community-mysql-libs.x86_64 5.6.27-1.fc23 community-mysql-server.x86_64 5.6.27-1.fc23</div><div class="line">mariadb-common.x86_64 1:10.0.21-1.fc23 mariadb-config.x86_64 1:10.0.21-1.fc23 mariadb-libs.x86_64 1:10.0.21-1.fc23 perl-DBD-MySQL.x86_64 4.033-1.fc23 perl-DBI.x86_64 1.633-6.fc23 perl-Data-Dumper.x86_64 2.158-347.fc23</div><div class="line">perl-Math-BigInt.noarch 1.9997-349.fc23</div><div class="line"></div><div class="line">完毕！</div></pre></td></tr></table></figure>
<h1 id="2启动mysql服务"><a href="#2启动mysql服务" class="headerlink" title="2启动mysql服务"></a>2启动mysql服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost ~]$ sudo service mysqld start</div><div class="line">Redirecting to /bin/systemctl start mysqld.service</div></pre></td></tr></table></figure>
<h1 id="3修改root密码"><a href="#3修改root密码" class="headerlink" title="3修改root密码"></a>3修改root密码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost <span class="built_in">log</span>]$ mysqladmin -u root password ‘<span class="built_in">test</span><span class="string">'</span></div><div class="line">Warning: Using a password on the command line interface can be insecure.</div></pre></td></tr></table></figure>
<h1 id="4本地登录"><a href="#4本地登录" class="headerlink" title="4本地登录"></a>4本地登录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost <span class="built_in">log</span>]$ mysql -u root -p</div><div class="line">Enter password:</div><div class="line">Welcome to the MySQL monitor. Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 3</div><div class="line">Server version: 5.6.27 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> help. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; show databases;</div><div class="line">+--------------------+</div><div class="line">| Database |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql |</div><div class="line">| performance_schema |</div><div class="line">+--------------------+</div><div class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</div><div class="line">mysql&gt; quit;</div><div class="line">Bye</div></pre></td></tr></table></figure>
<h1 id="5添加用户"><a href="#5添加用户" class="headerlink" title="5添加用户"></a>5添加用户</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; insert into mysql.user (host,user,password) values(<span class="string">'%'</span>,<span class="string">'happylife'</span>,PASSWORD(<span class="string">'happylife'</span>));</div></pre></td></tr></table></figure>
<h1 id="6修改权限"><a href="#6修改权限" class="headerlink" title="6修改权限"></a>6修改权限</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; grant all on *.* to <span class="string">'happylife'</span>@<span class="string">'%'</span>;</div></pre></td></tr></table></figure>
<p>其它(转自<a href="http://www.cnblogs.com/hencehong/archive/2013/03/19/mysql_user.html" target="_blank" rel="external">http://www.cnblogs.com/hencehong/archive/2013/03/19/mysql_user.html</a>)</p>
<h2 id="a添加权限"><a href="#a添加权限" class="headerlink" title="a添加权限"></a>a添加权限</h2><p>grant 权限 on 数据库.表 to ‘用户名’@’登录主机’;</p>
<p>权限： select ,update,delete,insert(表数据)、create,alert,drop(表结构)、references(外键)、create temporary tables(创建临时表)、index(操作索引)、create view,show view(视图)、create routine,alert routine,execute(存储过程)、all,all privileges(所有权限)</p>
<p>数据库：数据库名或者*(所有数据库)</p>
<p>表：表名或者*(某数据库下所有表)</p>
<p>主机:主机名或者%(任何其他主机)</p>
<p>例：grant selec,insert,update,delete on <em>.</em> to ‘jifei’@’%’;</p>
<h2 id="b撤销权限"><a href="#b撤销权限" class="headerlink" title="b撤销权限"></a>b撤销权限</h2><p>revoke 权限 on 数据库.表 from ‘用户名’@’登录主机’;//将to改为from</p>
<p>例：revoke all on <em>.</em> from ‘jifei’@’%’;</p>
<h2 id="c查看权限"><a href="#c查看权限" class="headerlink" title="c查看权限"></a>c查看权限</h2><p>show grants;//自己</p>
<p>show grants for dba@localhost;//指定用户指定host</p>
<h1 id="7远程登录"><a href="#7远程登录" class="headerlink" title="7远程登录"></a>7远程登录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mysql&gt; UPDATE mysql.user SET Host=<span class="string">'%'</span> WHERE Host=<span class="string">'localhost'</span> ;</div><div class="line">Query OK, 2 rows affected (0.04 sec)</div><div class="line">Rows matched: 2 Changed: 2 Warnings: 0</div><div class="line"></div><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@<span class="string">"%"</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; FLUSH PRIVILEGES ;</div><div class="line">Query OK, 0 rows affected (0.04 sec)</div></pre></td></tr></table></figure>
<p>执行完成后就可远程登录。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String,StringBuffer,StringBuilder对比]]></title>
      <url>http://grug.tech/2016/01/15/string-vs-stringbuffer-vs-stringbuilder/</url>
      <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>String 类代表字符串。在java中的连接字符串，如“abc”,都是这个类的实例。String 是常量;一旦创建就不能改变。String buffers是支持可变的字符串。String 是不可变。</p>
<p>如</p>
<p>String str=”abc”;</p>
<p>等同于</p>
<p>char data[]={‘a’,’b’,’c’};</p>
<p>String str=new String(data);</p>
<p>String类包含处理字符的一些方法，如比较，搜索，求子字符串，大小写转换。字符匹配是根据Character类中的Unicode Standard</p>
<p>Java语言提供一个特别的字符串连接符（+），用来把其它对象转换为字符串。String 的连接是通过StringBuilder（或者StringBuffer）类中的append方法。String转换通过toString方法实现，这个方法定义在Object类中。</p>
<p>注：<br>String()构造器初始化了一个空字符串的String.因为String是常量，所以这个构造器是不需要的。</p>
<a id="more"></a>
<h1 id="SringBuilder"><a href="#SringBuilder" class="headerlink" title="SringBuilder"></a>SringBuilder</h1><p>可变字符串。本类提供和StringBuffer相兼容的API,但不保证线程同步。（即线程安全。）本类是用来替代StringBuffer偶尔在单线程中应用的场景。在单线程的情景下，强烈优先使用本类，而不是StringBuffer,因为StringBuilder的执行效率要快很多。</p>
<p>StringBuilder核心方法是 append和insert方法。通过重载构造器来接收各种类型的数据。每种方法都高效地把数据转换成为字符，然后附加或者插入字符串到string builder中。append方法总是把字符串附加到字符串构造器的结尾;insert方法把字符插入到指定的位置。</p>
<p>比如:</p>
<p>StringBuilder z=new StringBuilder(“start”);</p>
<p>z.append(“le”);</p>
<p>z现在是“startle”</p>
<p>如果是执行</p>
<p>z.insert(4,”le”);</p>
<p>z则是“starlet”</p>
<p>通常，</p>
<p>StringBuilder sb=new StringBuilder(“test”);</p>
<p>sb.append(x);  &lt;===&gt;sb.insert(sb.length(),x)  这两个方法结果是一样的。</p>
<p>每个字符串构造器都有容量大小。因为字符串长度不会超过构造器，所以没有必要分配内存。如果内存不够，构造器会自动增长。</p>
<p>StringBuider实例不是线程安全的。如果要求多线程安全，建议使用 StringBuffer.</p>
<h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><p>线程安全，可变的字符串。string buffer像一个String,但是是可变的。在任何时间点，它包含一些字符串，但是长度和内容可以通过一些调用方法来改变。</p>
<p>String buffers是多线程安全的。其方法是同步的，这个很有必要，以便在多线程情况下调用像在单线程一样可以保持一致性。</p>
<p>任何同步方法调用只在 string buffer上有效。</p>
<p>从jdk5以后，在单线程中建议用StringBuilder.在通常情况下，优先使用StringBuilder,其支持与StringBuffer相同的方法，但运行速度更快，因为其运行不保证同步性。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1如果过多使用String对象来操作字符串，会增加创建对象的开销。</p>
<p>2如果是在单线程中操作字符串，建议StringBuilder.</p>
<p>3在多线程中，则需要使用StringBuffer保证线程安全。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[排序算法总结]]></title>
      <url>http://grug.tech/2016/01/15/sort-algorithm/</url>
      <content type="html"><![CDATA[<p>来源于网络</p>
<h1 id="java实现的各种排序"><a href="#java实现的各种排序" class="headerlink" title="java实现的各种排序"></a>java实现的各种排序</h1><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortUtil</span> </span>&#123;</div><div class="line"><span class="comment">/*************几种常见的排序算法总结***************************/</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> MAX=<span class="number">50</span>;</div><div class="line"><span class="keyword">int</span> num[]=<span class="keyword">new</span> <span class="keyword">int</span>[MAX];</div><div class="line">&#123;</div><div class="line">System.out.print(<span class="string">"生成的随机数组是："</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">num[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</div><div class="line">System.out.print(num[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num2[]=<span class="keyword">new</span> <span class="keyword">int</span>[MAX]; <span class="comment">//只用于合并排序法中</span></div><div class="line">&#123;</div><div class="line">System.out.print(<span class="string">"合并排序法需要使用的数组2是："</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">num2[i]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</div><div class="line">System.out.print(num2[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num3[]=<span class="keyword">new</span> <span class="keyword">int</span>[MAX+MAX]; <span class="comment">//用于存放合并排序法中被合并排序好的数组</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SortUtil</span><span class="params">()</span></span>&#123;</div><div class="line">selsort(num.clone()); <span class="comment">//选择排序法</span></div><div class="line">insort(num.clone()); <span class="comment">//插入排序法</span></div><div class="line">bubsort(num.clone()); <span class="comment">//冒泡排序法</span></div><div class="line">shellsort(num.clone()); <span class="comment">//希尔排序法</span></div><div class="line">shakersort(num.clone()); <span class="comment">//shake排序法</span></div><div class="line">heapsort(num.clone()); <span class="comment">//堆排序</span></div><div class="line">quicksort_one(num.clone()); <span class="comment">//快速排序法（一）</span></div><div class="line">quicksort_two(num.clone()); <span class="comment">//快速排序法（二）</span></div><div class="line">quicksort_three(num.clone()); <span class="comment">//快速排序法（三）</span></div><div class="line">mergesort(num.clone(),num2.clone(),num3); <span class="comment">//合并排序法</span></div><div class="line">basesort(num.clone()); <span class="comment">//基数排序法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*----------------------------选择排序法-------------------------------------------</span></div><div class="line">将要排序的对象分作两部份，一个是已排序的，一个是未排序的，从后端未排序部份选择一个最小值，并放入前端已排序部份的最后一个。</div><div class="line">-------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selsort</span><span class="params">(<span class="keyword">int</span> number[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k, m, temp;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX-<span class="number">1</span>; i++) &#123;</div><div class="line">m = i;</div><div class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; MAX; j++)&#123;</div><div class="line"><span class="keyword">if</span>(number[j] &lt; number[m])&#123;</div><div class="line">m = j;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>( i != m)&#123;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[m];</div><div class="line">number[m]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------选择排序法------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*-------------------------插入排序法--------------------------------</span></div><div class="line">像是玩朴克一样，我们将牌分作两堆，每次从后面一堆的牌抽出最前端的牌，然后插入前面一堆牌的适当位置</div><div class="line">-----------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insort</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k, temp;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</div><div class="line">temp = number[j];</div><div class="line">i = j - <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(temp &lt; number[i]) &#123;</div><div class="line">number[i+<span class="number">1</span>] = number[i];</div><div class="line">i--;</div><div class="line"><span class="keyword">if</span>(i == -<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">number[i+<span class="number">1</span>] = temp;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------插入排序法------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------------------------冒泡排序法----------------------------------------</span></div><div class="line">顾名思义，就是排序时，最大的元素会如同气泡一样移至右端，其利用比较相邻元素的方法，将大的元素交换至右端，</div><div class="line">所以大的元素会不断的往右移动，直到适当的位置为止。</div><div class="line">基本的气泡排序法可以利用旗标的方式稍微减少一些比较的时间，当寻访完阵列后都没有发生任何的交换动作，</div><div class="line">表示排序已经完成，而无需再进行之后的回圈比较与交换动作。</div><div class="line">----------------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubsort</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k, temp, flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX-<span class="number">1</span> &amp;&amp; flag == <span class="number">1</span>; i++) &#123;</div><div class="line">flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; MAX-i-<span class="number">1</span>; j++) &#123;</div><div class="line"><span class="keyword">if</span>(number[j+<span class="number">1</span>] &lt; number[j]) &#123;</div><div class="line">temp=number[j+<span class="number">1</span>];</div><div class="line">number[j+<span class="number">1</span>]=number[j];</div><div class="line">number[j]=temp;</div><div class="line">flag = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------冒泡排序法------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*--------------------------shell（希尔）排序法----------------------------</span></div><div class="line">Shell首先将间隔设定为n/2，然后跳跃进行插入排序，再来将间隔n/4，跳跃进行排序动作，再来</div><div class="line">间隔设定为n/8、n/16，直到间隔为1之后的最后一次排序终止，由于上一次的排序动作都会将</div><div class="line">固定间隔内的元素排序好，所以当间隔越来越小时，某些元素位于正确位置的机率越高，因此</div><div class="line">最后几次的排序动作将可以大幅减低。</div><div class="line">---------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span> number[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, k, gap, temp;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line">gap = MAX / <span class="number">2</span>;</div><div class="line"><span class="keyword">while</span>(gap &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; gap; k++) &#123;</div><div class="line"><span class="keyword">for</span>(i = k+gap; i &lt; MAX; i+=gap) &#123;</div><div class="line"><span class="keyword">for</span>(j = i - gap; j &gt;= k; j-=gap) &#123;</div><div class="line"><span class="keyword">if</span>(number[j] &gt; number[j+gap]) &#123;</div><div class="line">temp=number[j];</div><div class="line">number[j]=number[j+gap];</div><div class="line">number[j+gap]=temp;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">gap /= <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------shell(希尔)排序法（改进的插入排序法）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*---------------------Shake排序法（改良的冒泡排序法）--------------------------</span></div><div class="line">方法就在于气泡排序的双向进行，先让气泡排序由左向右进行，再来让气泡排序由右往左进行，</div><div class="line">如此完成一次排序的动作，而您必须使用left与right两个旗标来记录左右两端已排序的元素位置。</div><div class="line">--------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shakersort</span><span class="params">(<span class="keyword">int</span> number[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, temp, left = <span class="number">0</span>, right = MAX - <span class="number">1</span>, shift = <span class="number">0</span>;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">while</span>(left &lt; right) &#123;</div><div class="line"><span class="comment">// 向右進行氣泡排序</span></div><div class="line"><span class="keyword">for</span>(i = left; i &lt; right; i++) &#123;</div><div class="line"><span class="keyword">if</span>(number[i] &gt; number[i+<span class="number">1</span>]) &#123;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[i+<span class="number">1</span>];</div><div class="line">number[i+<span class="number">1</span>]=temp;</div><div class="line">shift = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">right = shift;</div><div class="line"></div><div class="line"><span class="comment">// 向左進行氣泡排序</span></div><div class="line"><span class="keyword">for</span>(i = right; i &gt; left; i--) &#123;</div><div class="line"><span class="keyword">if</span>(number[i] &lt; number[i-<span class="number">1</span>]) &#123;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[i-<span class="number">1</span>];</div><div class="line">number[i-<span class="number">1</span>]=temp;</div><div class="line">shift = i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">left = shift;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------shake排序法（改进的冒泡排序法）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------heap排序（堆排序法--改进的选择排序）----------------------------</span></div><div class="line">利用堆积树的原理，先构造一个堆积树（看堆积树的定义，笔记本上有），然后将根节点与最后的叶子节点交换，并屏蔽掉最后一个叶子节点，</div><div class="line">然后再将未被屏蔽的部分重新构造堆积树，然后再重复上面的步骤，直到所有的数被按顺序排好。</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapsort</span><span class="params">(<span class="keyword">int</span> number[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, m, p, s, temp;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">int</span> number_temp[]=<span class="keyword">new</span> <span class="keyword">int</span>[MAX+<span class="number">1</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> temp_i=<span class="number">1</span>;temp_i&lt;MAX+<span class="number">1</span>;temp_i++)&#123;</div><div class="line">number_temp[temp_i]=number[temp_i-<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">createheap(number_temp);</div><div class="line">m = MAX;</div><div class="line"><span class="keyword">while</span>(m &gt; <span class="number">1</span>) &#123;</div><div class="line">temp=number_temp[<span class="number">1</span>];</div><div class="line">number_temp[<span class="number">1</span>]=number_temp[m];</div><div class="line">number_temp[m]=temp;</div><div class="line">m--;</div><div class="line">p = <span class="number">1</span>;</div><div class="line">s = <span class="number">2</span> * p;</div><div class="line"><span class="keyword">while</span>(s &lt;= m) &#123;</div><div class="line"><span class="keyword">if</span>(s &lt; m &amp;&amp; number_temp[s+<span class="number">1</span>] &gt; number_temp[s])</div><div class="line">s++;</div><div class="line"><span class="keyword">if</span>(number_temp[p] &gt;= number_temp[s])</div><div class="line"><span class="keyword">break</span>;</div><div class="line">temp=number_temp[p];</div><div class="line">number_temp[p]=number_temp[s];</div><div class="line">number_temp[s]=temp;</div><div class="line">p = s;</div><div class="line">s = <span class="number">2</span> * p;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> temp_j=<span class="number">1</span>;temp_j&lt;MAX+<span class="number">1</span>;temp_j++)&#123;</div><div class="line">number[temp_j-<span class="number">1</span>]=number_temp[temp_j];</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line">System.out.println(<span class="string">"-----------------heap排序（堆排序法--改进的选择排序）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将原数组构造为从下标1开始的一个新数组，便于处理，同时将这个新数组构造为最初始的堆积树结构</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createheap</span><span class="params">(<span class="keyword">int</span> number[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, s, p, temp;</div><div class="line"><span class="keyword">int</span> heap[] = <span class="keyword">new</span> <span class="keyword">int</span>[MAX+<span class="number">1</span>];</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= MAX; i++) &#123;</div><div class="line">heap[i] = number[i];</div><div class="line">s = i;</div><div class="line">p = i / <span class="number">2</span>;</div><div class="line"><span class="keyword">while</span>(s &gt;= <span class="number">2</span> &amp;&amp; heap[p] &lt; heap[s]) &#123;</div><div class="line">temp=heap[p];</div><div class="line">heap[p]=heap[s];</div><div class="line">heap[s]=temp;</div><div class="line">s = p;</div><div class="line">p = s / <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= MAX; i++)&#123;</div><div class="line">number[i] = heap[i];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------快速排序法（一）---------------------------------------------</span></div><div class="line">这边所介绍的快速演算如下：将最左边的数设定为轴，并记录其值为s</div><div class="line">廻圈处理：</div><div class="line">令索引i 从数列左方往右方找，直到找到大于s 的数</div><div class="line">令索引j 从数列左右方往左方找，直到找到小于s 的数</div><div class="line">如果i &gt;= j，则离开回圈</div><div class="line">如果i &lt; j，则交换索引i与j两处的值</div><div class="line">将左侧的轴与j 进行交换</div><div class="line">对轴左边进行递回</div><div class="line">对轴右边进行递回</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_one</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line">quicksort_1(number,<span class="number">0</span>,MAX-<span class="number">1</span>);</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------快速排序法（ 一 ）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_1</span><span class="params">(<span class="keyword">int</span> number[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, s, temp;</div><div class="line"><span class="keyword">if</span>(left &lt; right) &#123;</div><div class="line">s = number[left];</div><div class="line">i = left;</div><div class="line">j = right + <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line"><span class="comment">// 向右找</span></div><div class="line"><span class="keyword">while</span>(i + <span class="number">1</span> &lt; number.length &amp;&amp; number[++i] &lt; s) ;</div><div class="line"><span class="comment">// 向左找</span></div><div class="line"><span class="keyword">while</span>(j -<span class="number">1</span> &gt; -<span class="number">1</span> &amp;&amp; number[--j] &gt; s) ;</div><div class="line"><span class="keyword">if</span>(i &gt;= j)</div><div class="line"><span class="keyword">break</span>;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[j];</div><div class="line">number[j]=temp;</div><div class="line">&#125;</div><div class="line">number[left] = number[j];</div><div class="line">number[j] = s;</div><div class="line">quicksort_1(number, left, j-<span class="number">1</span>); <span class="comment">// 对左边进行递回</span></div><div class="line">quicksort_1(number, j+<span class="number">1</span>, right); <span class="comment">// 对右边进行递回</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*-----------------------快速排序法（二）---------------------------------------------</span></div><div class="line">在这个例子中，取中间的元素s作比较，同样的先得右找比s大的索引i，然后找比s小的</div><div class="line">索引j，只要两边的索引还没有交会，就交换i 与j 的元素值，这次不用再进行轴的交换了，</div><div class="line">因为在寻找交换的过程中，轴位置的元素也会参与交换的动作，例如：</div><div class="line">41 24 76 11 45 64 21 69 19 36</div><div class="line">首先left为0，right为9，(left+right)/2 = 4（取整数的商），所以轴为索引4的位置，比较的元素是</div><div class="line">45，您往右找比45大的，往左找比45小的进行交换：</div><div class="line">41 24 76* 11 [45] 64 21 69 19 *36</div><div class="line">41 24 36 11 45* 64 21 69 19* 76</div><div class="line">41 24 36 11 19 64* 21* 69 45 76</div><div class="line">[41 24 36 11 19 21] [64 69 45 76]</div><div class="line">完成以上之后，再初别对左边括号与右边括号的部份进行递回，如此就可以完成排序的目的。</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_two</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line">quicksort_2(number,<span class="number">0</span>,MAX-<span class="number">1</span>);</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------快速排序法（ 二 ）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_2</span><span class="params">(<span class="keyword">int</span> number[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, s, temp;</div><div class="line"><span class="keyword">if</span>(left &lt; right) &#123;</div><div class="line">s = number[(left+right)/<span class="number">2</span>];</div><div class="line">i = left - <span class="number">1</span>;</div><div class="line">j = right + <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line"><span class="keyword">while</span>(number[++i] &lt; s) ; <span class="comment">// 向右找</span></div><div class="line"><span class="keyword">while</span>(number[--j] &gt; s) ; <span class="comment">// 向左找</span></div><div class="line"><span class="keyword">if</span>(i &gt;= j)</div><div class="line"><span class="keyword">break</span>;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[j];</div><div class="line">number[j]=temp;</div><div class="line">&#125;</div><div class="line">quicksort_2(number, left, i-<span class="number">1</span>); <span class="comment">// 对左边进行递回</span></div><div class="line">quicksort_2(number, j+<span class="number">1</span>, right); <span class="comment">// 对右边进行递回</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------快速排序法（三）---------------------------------------------</span></div><div class="line">先说明这个快速排序法的概念，它以最右边的值s作比较的标准，将整个数列分为三个部份，</div><div class="line">一个是小于s的部份，一个是大于s的部份，一个是未处理的部份，如下所示：</div><div class="line">i j</div><div class="line">--------|-----------|----------|s</div><div class="line">小于s 大于s 未处理</div><div class="line">在排序的过程中，i 与j 都会不断的往右进行比较与交换，最后数列会变为以下的状态：</div><div class="line">-------------|-----------------|s</div><div class="line">小于s 大于s</div><div class="line">然后将s的值置于中间，接下来就以相同的步骤会左右两边的数列进行排序的动作，如下所示：</div><div class="line">-------------|s|---------------</div><div class="line">小于s 大于s</div><div class="line">然后采用递归的方法重复上面的步骤，就可以实现排序了。</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_three</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line">quicksort_3(number,<span class="number">0</span>,MAX-<span class="number">1</span>);</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------快速排序法（ 三 ）------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> number[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i, j, s, temp;</div><div class="line">s = number[right];</div><div class="line">i = left - <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(j = left; j &lt; right; j++) &#123;</div><div class="line"><span class="keyword">if</span>(number[j] &lt;= s) &#123;</div><div class="line">i++;</div><div class="line">temp=number[i];</div><div class="line">number[i]=number[j];</div><div class="line">number[j]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">temp=number[i+<span class="number">1</span>];</div><div class="line">number[i+<span class="number">1</span>]=number[right];</div><div class="line">number[right]=temp;</div><div class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quicksort_3</span><span class="params">(<span class="keyword">int</span> number[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> q;</div><div class="line"><span class="keyword">if</span>(left &lt; right) &#123;</div><div class="line">q = partition(number, left, right);</div><div class="line">quicksort_3(number, left, q-<span class="number">1</span>);</div><div class="line">quicksort_3(number, q+<span class="number">1</span>, right);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*-----------------------合并排序法---------------------------------------------</span></div><div class="line">合并排序法基本是将两笔已排序的资料合并并进行排序，如果所读入的资料尚未排序，</div><div class="line">可以先利用其它的排序方式来处理这两笔资料，然后再将排序好的这两笔资料合并。</div><div class="line">合并排序法中用到了 快速排序法（三）</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> number1[],<span class="keyword">int</span> number2[],<span class="keyword">int</span> number3[])</span></span>&#123;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line"></div><div class="line">start=System.nanoTime();</div><div class="line">quicksort_3(number1,<span class="number">0</span>,MAX-<span class="number">1</span>);</div><div class="line">quicksort_3(number2,<span class="number">0</span>,MAX-<span class="number">1</span>);</div><div class="line">mergesort_merge(number1,MAX,number2,MAX,number3);</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------合并排序法------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=MAX+MAX-<span class="number">1</span>;i++)&#123;</div><div class="line">System.out.print(number3[i]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergesort_merge</span><span class="params">(<span class="keyword">int</span> number1[], <span class="keyword">int</span> M, <span class="keyword">int</span> number2[], <span class="keyword">int</span> N, <span class="keyword">int</span> number3[])</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i &lt; M &amp;&amp; j &lt; N) &#123;</div><div class="line"><span class="keyword">if</span>(number1[i] &lt;= number2[j])&#123;</div><div class="line">number3[k++] = number1[i++];</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">number3[k++] = number2[j++];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(i &lt; M)&#123;</div><div class="line">number3[k++] = number1[i++];</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(j &lt; N)&#123;</div><div class="line">number3[k++] = number2[j++];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-----------------------基数排序法---------------------------------------------</span></div><div class="line">基数排序的方式可以采用LSD（Least sgnificant digital）或MSD（Most sgnificant digital），</div><div class="line">LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。</div><div class="line">以LSD为例，假设原来有一串数值如下所示：</div><div class="line">73, 22, 93, 43, 55, 14, 28, 65, 39, 81</div><div class="line">首先根据个位数的数值，在走访数值时将它们分配至编号0到9的桶子中：</div><div class="line">0 1 2 3 4 5 6 7 8 9</div><div class="line">81 65 39</div><div class="line">43 14 55 28</div><div class="line">93</div><div class="line">22 73</div><div class="line">接下来将这些桶子中的数值重新串接起来，成为以下的数列：</div><div class="line">81, 22, 73, 93, 43, 14, 55, 65, 28, 39</div><div class="line">接着再进行一次分配，这次是根据十位数来分配：</div><div class="line">接下来将这些桶子中的数值重新串接起来，成为以下的数列：</div><div class="line">0 1 2 3 4 5 6 7 8 9</div><div class="line">28 39</div><div class="line">14 22 43 55 65 73 81 93</div><div class="line">14, 22, 28, 39, 43, 55, 65, 73, 81, 93</div><div class="line">这时候整个数列已经排序完毕；如果排序的对象有三位数以上，则持续进行以上的动作直至最</div><div class="line">高位数为止。</div><div class="line">LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好，MSD的方</div><div class="line">式恰与LSD相反，是由高位数为基底开始进行分配，其他的演算方式则都相同。</div><div class="line">--------------------------------------------------------------------------------*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basesort</span><span class="params">(<span class="keyword">int</span> number[])</span></span>&#123;</div><div class="line"><span class="keyword">int</span> temp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[MAX][MAX];</div><div class="line"><span class="keyword">int</span> order[] = <span class="keyword">new</span> <span class="keyword">int</span>[MAX];</div><div class="line"><span class="keyword">int</span> i, j, k, n, lsd;</div><div class="line"><span class="keyword">long</span> start,end;</div><div class="line">k = <span class="number">0</span>;</div><div class="line">n = <span class="number">1</span>;</div><div class="line">start=System.nanoTime();</div><div class="line"><span class="keyword">while</span>(n &lt;= <span class="number">10</span>) &#123;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</div><div class="line">lsd = ((number[i] / n) % <span class="number">10</span>);</div><div class="line">temp[lsd][order[lsd]] = number[i];</div><div class="line">order[lsd]++;</div><div class="line">&#125;</div><div class="line"><span class="comment">//重新排列</span></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</div><div class="line"><span class="keyword">if</span>(order[i] != <span class="number">0</span>)</div><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; order[i]; j++) &#123;</div><div class="line">number[k] = temp[i][j];</div><div class="line">k++;</div><div class="line">&#125;</div><div class="line">order[i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">n *= <span class="number">10</span>;</div><div class="line">k = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">end=System.nanoTime();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-----------------基数排序法------------------"</span>);</div><div class="line">System.out.print(<span class="string">"排序后是:"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">0</span>;ii&lt;=MAX-<span class="number">1</span>;ii++)&#123;</div><div class="line">System.out.print(number[ii]+<span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">System.out.println(<span class="string">"排序使用时间："</span>+(end-start)+<span class="string">" ns"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"以下的测试时间仅供参考..."</span>);</div><div class="line"><span class="comment">// new SortUtil();</span></div><div class="line"><span class="keyword">int</span>[] testint=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h1><p>来源：<a href="http://www.cnblogs.com/heyonggang/p/3356930.html" target="_blank" rel="external"> http://www.cnblogs.com/heyonggang/p/3356930.html</a></p>
<p>(1)冒泡排序</p>
<p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无 聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改 变，所以冒泡排序是一种稳定排序算法。</p>
<p>(2)选择排序</p>
<p>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9， 我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p>
<p>(3)插入排序<br>插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开 始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相 等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳 定的。</p>
<p>(4)快速排序<br>快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。 交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11， 现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j]交换的时刻。</p>
<p>(5)归并排序<br>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</p>
<p>(6)基数排序<br>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优 先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。</p>
<p>(7)希尔排序(shell)<br>希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小， 插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元 素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。</p>
<p>(8)堆排序<br>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法</p>
<p>1 快速排序（QuickSort）</p>
<p>快速排序是一个就地排序，分而治之，大规模递归的算法。从本质上来说，它是归并排序的就地版本。快速排序可以由下面四步组成。</p>
<p>（1） 如果不多于1个数据，直接返回。<br>（2） 一般选择序列最左边的值作为支点数据。<br>（3） 将序列分成2部分，一部分都大于支点数据，另外一部分都小于支点数据。<br>（4） 对两边利用递归排序数列。</p>
<p>快速排序比大部分排序算法都要快。尽管我们可以在某些特殊的情况下写出比快速排序快的算法，但是就通常情况而言，没有比它更快的了。快速排序是递归的，对于内存非常有限的机器来说，它不是一个好的选择。</p>
<p>2 归并排序（MergeSort）</p>
<p>归并排序先分解要排序的序列，从1分成2，2分成4，依次分解，当分解到只有1个一组的时候，就可以排序这些分组，然后依次合并回原来的序列中，这样就可以排序所有数据。合并排序比堆排序稍微快一点，但是需要比堆排序多一倍的内存空间，因为它需要一个额外的数组。</p>
<p>3 堆排序（HeapSort）</p>
<p>堆排序适合于数据量非常大的场合（百万数据）。</p>
<p>堆排序不需要大量的递归或者多维的暂存数组。这对于数据量非常巨大的序列是合适的。比如超过数百万条记录，因为快速排序，归并排序都使用递归来设计算法，在数据量非常大的时候，可能会发生堆栈溢出错误。</p>
<p>堆排序会将所有的数据建成一个堆，最大的数据在堆顶，然后将堆顶数据和序列的最后一个数据交换。接下来再次重建堆，交换数据，依次下去，就可以排序所有的数据。</p>
<p>4 Shell排序（ShellSort）</p>
<p>Shell排序通过将数据分成不同的组，先对每一组进行排序，然后再对所有的元素进行一次插入排序，以减少数据交换和移动的次数。平均效率是O(nlogn)。其中分组的合理性会对算法产生重要的影响。现在多用D.E.Knuth的分组方法。</p>
<p>Shell排序比冒泡排序快5倍，比插入排序大致快2倍。Shell排序比起QuickSort，MergeSort，HeapSort慢很多。但是它相对比较简单，它适合于数据量在5000以下并且速度并不是特别重要的场合。它对于数据量较小的数列重复排序是非常好的。</p>
<p>5 插入排序（InsertSort）</p>
<p>插入排序通过把序列中的值插入一个已经排序好的序列中，直到该序列的结束。插入排序是对冒泡排序的改进。它比冒泡排序快2倍。一般不用在数据大于1000的场合下使用插入排序，或者重复排序超过200数据项的序列。</p>
<p>6 冒泡排序（BubbleSort）</p>
<p>冒泡排序是最慢的排序算法。在实际运用中它是效率最低的算法。它通过一趟又一趟地比较数组中的每一个元素，使较大的数据下沉，较小的数据上升。它是O(n^2)的算法。</p>
<p>7 交换排序（ExchangeSort）和选择排序（SelectSort）</p>
<p>这两种排序方法都是交换方法的排序算法，效率都是 O(n2)。在实际应用中处于和冒泡排序基本相同的地位。它们只是排序算法发展的初级阶段，在实际中使用较少。</p>
<p>8 基数排序（RadixSort）</p>
<p>基数排序和通常的排序算法并不走同样的路线。它是一种比较新颖的算法，但是它只能用于 整数的排序，如果我们要把同样的办法运用到浮点数上，我们必须了解浮点数的存储格式，并通过特殊的方式将浮点数映射到整数上，然后再映射回去，这是非常麻 烦的事情，因此，它的使用同样也不多。而且，最重要的是，这样算法也需要较多的存储空间。</p>
<p>9 总结</p>
<p>下面是一个总的表格，大致总结了我们常见的所有的排序算法的特点。</p>
<p>排序法 平均时间 最差情形 稳定度 额外空间 备注<br>冒泡 O(n2) O(n2) 稳定 O(1) n小时较好<br>交换 O(n2) O(n2) 不稳定 O(1) n小时较好<br>选择 O(n2) O(n2) 不稳定 O(1) n小时较好<br>插入 O(n2) O(n2) 稳定 O(1) 大部分已排序时较好<br>基数 O(logRB) O(logRB) 稳定 O(n)<br>B是真数(0-9)，</p>
<p>R是基数(个十百)</p>
<p>Shell O(nlogn) O(ns) 1&lt;s 快速 O(nlogn) O(n2) 不稳定 O(nlogn) n大时较好<br>归并 O(nlogn) O(nlogn) 稳定 O(1) n大时较好<br>堆 O(nlogn) O(nlogn) 不稳定 O(1) n大时较好</p>
<p>选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，<br>冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Thread.join()用法]]></title>
      <url>http://grug.tech/2016/01/13/thread-join/</url>
      <content type="html"><![CDATA[<p>Thread.join()的作用是等待当前线程结束或者终结。</p>
<p>例子如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadjoinTest</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">Thread thread1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">50</span>;i++)&#123;</div><div class="line">j++;</div><div class="line">System.out.println(System.currentTimeMillis()+<span class="string">" "</span>+j);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Thread thread2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="keyword">int</span> j;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;<span class="number">50</span>;i++)&#123;</div><div class="line">j--;</div><div class="line">System.out.println(System.currentTimeMillis()+<span class="string">" "</span>+j);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">thread1.start();</div><div class="line"><span class="comment">// thread1.join();</span></div><div class="line">thread2.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当注释thread1.join()时，</p>
<p>运行结果为</p>
<p>1452667631902 1<br>1452667631902 -1<br>1452667631902 -2<br>1452667631902 -3<br>1452667631902 2<br>1452667631902 -4<br>1452667631902 3<br>1452667631902 4<br>1452667631902 -5<br>1452667631902 5<br>1452667631902 6<br>1452667631902 -6<br>1452667631902 7<br>1452667631902 -7<br>1452667631902 8<br>1452667631902 -8<br>1452667631902 9<br>1452667631902 -9<br>1452667631902 10<br>1452667631902 -10<br>1452667631902 11<br>1452667631902 -11<br>1452667631902 12<br>1452667631902 -12<br>1452667631902 13<br>1452667631902 -13<br>1452667631902 14<br>1452667631902 -14<br>1452667631902 15<br>1452667631903 16<br>1452667631903 17<br>1452667631902 -15<br>1452667631903 18<br>1452667631903 -16<br>1452667631903 19<br>1452667631903 -17<br>1452667631903 20<br>1452667631903 -18<br>1452667631903 21<br>1452667631903 -19<br>1452667631903 22<br>1452667631903 -20<br>1452667631903 23<br>1452667631903 -21<br>1452667631903 24<br>1452667631903 -22<br>1452667631903 25<br>1452667631903 -23<br>1452667631903 26<br>1452667631903 -24<br>1452667631903 27<br>1452667631903 -25<br>1452667631903 28<br>1452667631903 -26<br>1452667631903 29<br>1452667631903 -27<br>1452667631903 30<br>1452667631903 -28<br>1452667631903 31<br>1452667631903 -29<br>1452667631903 32<br>1452667631903 -30<br>1452667631903 33<br>1452667631903 -31<br>1452667631903 34<br>1452667631903 -32<br>1452667631903 35<br>1452667631903 -33<br>1452667631903 36<br>1452667631903 -34<br>1452667631903 37<br>1452667631903 -35<br>1452667631903 38<br>1452667631903 -36<br>1452667631903 39<br>1452667631903 -37<br>1452667631903 40<br>1452667631903 -38<br>1452667631903 41<br>1452667631903 -39<br>1452667631903 42<br>1452667631903 -40<br>1452667631903 43<br>1452667631903 -41<br>1452667631903 44<br>1452667631903 -42<br>1452667631903 45<br>1452667631904 -43<br>1452667631904 46<br>1452667631904 -44<br>1452667631904 47<br>1452667631904 -45<br>1452667631904 48<br>1452667631904 -46<br>1452667631904 49<br>1452667631904 -47<br>1452667631904 50<br>1452667631904 -48<br>1452667631904 -49<br>1452667631904 -50</p>
<p>当执行join()时，运行结果为</p>
<p>1452667695032 1<br>1452667695032 2<br>1452667695032 3<br>1452667695032 4<br>1452667695032 5<br>1452667695032 6<br>1452667695032 7<br>1452667695032 8<br>1452667695033 9<br>1452667695033 10<br>1452667695033 11<br>1452667695033 12<br>1452667695033 13<br>1452667695033 14<br>1452667695033 15<br>1452667695033 16<br>1452667695033 17<br>1452667695033 18<br>1452667695033 19<br>1452667695033 20<br>1452667695033 21<br>1452667695033 22<br>1452667695033 23<br>1452667695033 24<br>1452667695033 25<br>1452667695033 26<br>1452667695033 27<br>1452667695033 28<br>1452667695033 29<br>1452667695033 30<br>1452667695033 31<br>1452667695033 32<br>1452667695033 33<br>1452667695033 34<br>1452667695033 35<br>1452667695033 36<br>1452667695033 37<br>1452667695033 38<br>1452667695033 39<br>1452667695033 40<br>1452667695033 41<br>1452667695033 42<br>1452667695033 43<br>1452667695033 44<br>1452667695033 45<br>1452667695033 46<br>1452667695033 47<br>1452667695033 48<br>1452667695033 49<br>1452667695033 50<br>1452667695033 -1<br>1452667695033 -2<br>1452667695033 -3<br>1452667695033 -4<br>1452667695033 -5<br>1452667695033 -6<br>1452667695033 -7<br>1452667695034 -8<br>1452667695034 -9<br>1452667695034 -10<br>1452667695034 -11<br>1452667695034 -12<br>1452667695034 -13<br>1452667695034 -14<br>1452667695034 -15<br>1452667695034 -16<br>1452667695034 -17<br>1452667695034 -18<br>1452667695034 -19<br>1452667695034 -20<br>1452667695034 -21<br>1452667695034 -22<br>1452667695034 -23<br>1452667695034 -24<br>1452667695034 -25<br>1452667695034 -26<br>1452667695034 -27<br>1452667695034 -28<br>1452667695034 -29<br>1452667695034 -30<br>1452667695034 -31<br>1452667695034 -32<br>1452667695034 -33<br>1452667695034 -34<br>1452667695034 -35<br>1452667695034 -36<br>1452667695034 -37<br>1452667695034 -38<br>1452667695034 -39<br>1452667695034 -40<br>1452667695034 -41<br>1452667695034 -42<br>1452667695034 -43<br>1452667695034 -44<br>1452667695034 -45<br>1452667695034 -46<br>1452667695034 -47<br>1452667695034 -48<br>1452667695034 -49<br>1452667695034 -50</p>
<p>即要等待thread1执行完毕，再执行thread2.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pylot使用手册]]></title>
      <url>http://grug.tech/2015/12/11/pylot-user-guide/</url>
      <content type="html"><![CDATA[<p>本文主要翻译<a href="http://www.pylot.org/gettingstarted.html" target="_blank" rel="external">http://www.pylot.org/gettingstarted.html</a>   “Using Pylot”段落</p>
<h2 id="Using-Pylot-使用Pylot"><a href="#Using-Pylot-使用Pylot" class="headerlink" title="Using Pylot 使用Pylot"></a>Using Pylot <strong>使用Pylot</strong></h2><h3 id="Step-1-Create-Test-Cases-创建测试用例"><a href="#Step-1-Create-Test-Cases-创建测试用例" class="headerlink" title="Step 1: Create Test Cases 创建测试用例"></a>Step 1: Create Test Cases <strong>创建测试用例</strong></h3><p>Test cases are declared in an XML file named “testcases.xml”, or a different XML file specified on the command line. This is the format that the test engine understands.</p>
<p><strong>测试用例在”testcases.xml”中定义，或者在命令行中指定。</strong></p>
<p>A test case is defined using the following syntax. Only the URL element is required.</p>
<a id="more"></a>
<p><strong>一个测试用例可以像下面一样定义，只有URL是必需的。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">method</span>&gt;</span>HTTP METHOD<span class="tag">&lt;/<span class="name">method</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>REQUEST BODY CONTENT<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">add_header</span>&gt;</span>ADDITIONAL HTTP HEADER<span class="tag">&lt;/<span class="name">add_header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">verify</span>&gt;</span>STRING OR REGULAR EXPRESSION<span class="tag">&lt;/<span class="name">verify</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">verify_negative</span>&gt;</span>STRING OR REGULAR EXPRESSION<span class="tag">&lt;/<span class="name">verify_negative</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">timer_group</span>&gt;</span>TIMER GROUP NAME<span class="tag">&lt;/<span class="name">timer_group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">case</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Below is an example of the simplest possible test case file. It contains a single test case which will be executed continuously during the test run. The test case contains a URL for the service under test. Since no method or body defined, it will default to sending an HTTP GET to this resource. Since no verifications are defined, it will pass/fail the test case based on the HTTP status code it receives (pass if status is&gt; 400).</p>
<p><strong>下面是一个很简单的用例文件。它只包含了一个测试用例。这个用例包含一个URL.因为没有定义methon和body标签，所以用例默认会发送一个HTTP Get请求来请求资源。同样，因为没有定义标签 verifications，所以它以返回的HTTP状态码来判断请求是否成功。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">testcases</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com/foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">testcases</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>We can add positive and negative verifications. A positive verification is a string or regular expression that must be contained in the response body. A negative verification is a string or regular expression that must not be contained in the response body.</p>
<p><strong>我们可以增加<em>肯定假设</em>和<em>否定假设。肯定假设</em>是返回的结果中一定包含的字符或者正则表达式。<em>否定假设</em>是返回的结果中一定不包含的字符或者正则表达式。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.goldb.org/foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">verify</span>&gt;</span>Copyright.*Corey Goldberg<span class="tag">&lt;/<span class="name">verify</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">verify_negative</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">verify_negative</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies:"></a>Cookies:</h4><p>Cookies are handled automatically. If a response is received with a “Set-cookie” header, the cookie will be set and passed back in the header of subsequent requests.</p>
<p><strong>Cookies会自动处理。如果返回头中有“Set-cookie”,这个cookie就会被设置并传到后续的请求中。</strong></p>
<h4 id="Example-Yahoo-Search-Web-Services-REST-API"><a href="#Example-Yahoo-Search-Web-Services-REST-API" class="headerlink" title="Example: Yahoo! Search Web Services (REST API)"></a>Example: Yahoo! Search Web Services (REST API)</h4><p>Yahoo offers various <a href="http://developer.yahoo.com/search/rest.html" target="_blank" rel="external">REST Web Services</a> to access search results. In this example, I will show how to create Pylot test cases to interact with the REST API.</p>
<p><strong>雅虎提供各种各样的REST 搜索服务。在下面的例子中，我会解释如何创建Pylot测试用例来测试他们的REST API</strong></p>
<p>Here is a simple GET request against the service:</p>
<p><strong>下面是一个简单的Get服务请求</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http://search.yahooapis.com/WebSearchService/V1/webSearch?appid=YahooDemo&amp;query=foo</div></pre></td></tr></table></figure></p>
<p>A Pylot test case for this request would look like this:</p>
<p><strong> 一个对应的Pylot测试用例像下面这样：</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://search.yahooapis.com/WebSearchService/V1/webSearch?appid=YahooDemo&amp;query=foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">case</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Notice that the ampersand (&amp;) in the URL was escaped with the code: “&amp;”<br>This is done becasue certain characters (“&lt;” and “&amp;”) are illegal in XML documents. Since we are definig test cases within an XML doc, we must either escape these with ampersand codes, or place them within a CDATA section.</p>
<p><strong>请注意URL中的“&amp;”字符转义成了“&amp;”。原因是XML文件中“&lt;”和“&amp;”是非法的。我们的测试用例是定义在xml中，我们必须转义这些字符或者定义在“CDATA ”段落中。</strong></p>
<p>Yahoo also allows the query parameters to be passed in the POST data block. In this case we must also change the “Content-type” HTTP header to: “application/x-www-form-urlencoded”. (Pylot defaults to “text/xml”)</p>
<p><strong>雅虎允许在post请求中添加 query参数。在这里，我们必须修改http头为”application/x-www-form-urlencoded”。（Pylot 默认是”text/xml”）</strong></p>
<p>Here is a POST request against the service:</p>
<p><strong>下面是一个POST服务请求。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://search.yahooapis.com/WebSearchService/V1/webSearch<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">method</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>&lt;![CDATA[appid=YahooDemo&amp;query=webinject]]&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">add_header</span>&gt;</span>Content-type: application/x-www-form-urlencoded<span class="tag">&lt;/<span class="name">add_header</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">case</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Now that we know how to create individual cases, we can create a test case file containing several of these. In this example, our test case file contains Yahoo web search queries for: “foo”, “bar”, “baz”</p>
<p><strong>现在我们知道了如何创建单个独立的用例，我们还可以在一个测试用例文件中包含多个用例。在下面的例子中，我们的一个文件中包含了在雅虎中搜索“foo”,”bar”,”baz”.</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">testcases</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://search.yahooapis.com/WebSearchService/V1/webSearch?appid=YahooDemo&amp;query=foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://search.yahooapis.com/WebSearchService/V1/webSearch?appid=YahooDemo&amp;query=bar<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://search.yahooapis.com/WebSearchService/V1/webSearch?appid=YahooDemo&amp;query=baz<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">testcases</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Example-SOAP-API"><a href="#Example-SOAP-API" class="headerlink" title="Example: SOAP API"></a>Example: SOAP API</h4><p>We can model our test cases to talk to any HTTP API. This example shows how you could send requests to a SOAP service. The SOAP envelope we need to send will be enclosed in the HTTP POST body.</p>
<p><strong>我们可以组织我们的测试用例来测试任意HTTP API.下面的例子告诉我们如何测试SOAP 服务。SOAP  请求内容要声明在HTTP POST body标签中。</strong><br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;case&gt;</div><div class="line">  &lt;url&gt;http://www.example.org/StockPrice&lt;/url&gt;</div><div class="line">  &lt;method&gt;POST&lt;/method&gt;</div><div class="line">  &lt;add_header&gt;Content-Type: application/soap+xml; charset=utf-8&lt;/add_header&gt;</div><div class="line">  &lt;body&gt;&lt;!</div><div class="line">    [CDATA[</div><div class="line"></div><div class="line">      &lt;!-- This is the SOAP Envelope  --&gt;  </div><div class="line">      &lt;?xml version="1.0"?&gt;</div><div class="line">      &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"</div><div class="line">        soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;</div><div class="line">        &lt;soap:Body xmlns:m="http://www.example.org/stock"&gt;</div><div class="line">          &lt;m:GetStockPrice&gt;</div><div class="line">            &lt;m:StockName&gt;IBM&lt;/m:StockName&gt;</div><div class="line">          &lt;/m:GetStockPrice&gt;</div><div class="line">        &lt;/soap:Body&gt;</div><div class="line">      &lt;/soap:Envelope&gt;</div><div class="line"></div><div class="line">    ]]&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/case&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Example-Setting-Static-Variables-Parameters-设置静态变量-参数"><a href="#Example-Setting-Static-Variables-Parameters-设置静态变量-参数" class="headerlink" title="Example: Setting Static Variables/Parameters 设置静态变量/参数"></a>Example: Setting Static Variables/Parameters <strong>设置静态变量/参数</strong></h4><p>You can define global parameters in your test case file. This is useful if you have a value shared among several test cases that you change often. In the example below, we define an “http_server” parameter and then use that token in a test case.</p>
<p><strong>你可以在测试用例文件中定义全局参数。如果在几个测试用例中共用一个值，这会非常有用。下面我们定义了一个“http_server” 参数并在一个用例中使用了它。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">testcases</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"http_server"</span> <span class="attr">value</span>=<span class="string">"http://www.example.com"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>$&#123;http_server&#125;/foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">case</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">testcases</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Example-File-based-HTTP-Payloads-基于文件的HTTP请求"><a href="#Example-File-based-HTTP-Payloads-基于文件的HTTP请求" class="headerlink" title="Example: File-based HTTP Payloads 基于文件的HTTP请求"></a>Example: File-based HTTP Payloads <strong>基于文件的HTTP请求</strong></h4><p>You may want to store POST data in an external file rather than declaring it directly in your testcase XML file. This is useful if you have very large POST BODYs or want to send binary data which can not be embedded in XML. Use the syntax below to pull data from a file and POST it at runtime.</p>
<p><strong>你可能会想把提交的数据放在一个外部的文件中而不是直接定义在testcase xml 文件中。当你的提交数据非常大或者要提交二进制数据，但又不能在xml中定义时，这会非常有用。用下面的语法从文件获取数据并在运行时提交。</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com/foo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">method</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">file</span>=<span class="string">"./myfile.dat"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">case</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Step-2-Model-Workload-Scenario-工作量模型方案"><a href="#Step-2-Model-Workload-Scenario-工作量模型方案" class="headerlink" title="Step 2: Model Workload Scenario 工作量模型方案"></a>Step 2: Model Workload Scenario <strong>工作量模型方案</strong></h3><p>Define a workload using the controls on the UI. Using the options below. you can create a steady-state or increasing load test.</p>
<p><strong>在UI上定义工作量。可以选择下面的选项。可以创建静态或者动态的测试。</strong></p>
<ul>
<li><strong>Agents</strong>: number of agents (virtual users) to run <strong>代理个数（虚拟访问者）</strong></li>
<li><strong>Rampup</strong>: time span over which agents are started. They will be evenly distributed throughout this time span. (see note below)<strong>每个代理启动的间隔。</strong></li>
<li><strong>Interval</strong>: interval at which each user sends requests. The requests from each user agent are paced at even intervals (unless the respone time is slower thean the interval defined)<strong>每个虚拟用户请求的间隔。</strong></li>
<li><strong>Duration</strong>: time span of the test <strong>测试持续时间</strong></li>
</ul>
<h3 id="Step-3-Execute-and-Monitor-运行和监控"><a href="#Step-3-Execute-and-Monitor-运行和监控" class="headerlink" title="Step 3: Execute and Monitor 运行和监控"></a>Step 3: Execute and Monitor <strong>运行和监控</strong></h3><h4 id="Run-Modes-运行以下模式"><a href="#Run-Modes-运行以下模式" class="headerlink" title="Run Modes 运行以下模式"></a>Run Modes <strong>运行以下模式</strong></h4><ul>
<li><strong>Console Mode</strong>: During the test, you can view real-time stats on the <strong>UI 命令行模式：在命令行实时查看进程。</strong></li>
<li><strong>Blocking Mode</strong>: STDOUT is blocked until test finishes, results are returned as XML<strong> 阻断模式：不输出日志，直到结束，返回xml结果</strong></li>
<li><strong>GUI Mode</strong>: Manage and view running tests with the GUI interface <strong>界面模式：在界面下管理用例。</strong><br>At the end of a test run, an HTML report is automatically generated, showing test results and graphs.</li>
</ul>
<p><strong>最后，会自动产生一个HTML报告，展示测试结果和图像。</strong></p>
<h3 id="Step-4-View-Results-查看结果"><a href="#Step-4-View-Results-查看结果" class="headerlink" title="Step 4: View Results 查看结果"></a>Step 4: View Results <strong>查看结果</strong></h3><p>When a test is finished, a results directory is created and a report is automatically generated to summarize the test results. It includes various statistics and graphs for response times and throughput. A sample of the results report can be seen here:</p>
<p><strong>当测试结束，会自动生产一个文件夹和测试报告。包含响应时间和吞吐量各种数据和表格。下面是一个示例：</strong></p>
<p><a href="http://www.pylot.org/samples/results/results.html" target="_blank" rel="external">Sample Report</a></p>
<p>Pylot also writes results to CSV text files so you can import them into your favorite spreadsheet to crunch numbers, generate statistics, and create graphs.</p>
<p><strong>Pylot 也会生产csv文件，你可以导入到你喜欢的表格处理程序中来处理数字，生产数据，创建图表。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pylot压力测试工具使用]]></title>
      <url>http://grug.tech/2015/12/11/pylot-in-action/</url>
      <content type="html"><![CDATA[<p>Pylot 是一款开源的压力测试工具.</p>
<h1 id="到官方网站下载安装包"><a href="#到官方网站下载安装包" class="headerlink" title="到官方网站下载安装包"></a>到官方网站下载安装包</h1><p><a href="http://www.pylot.org/download.html" target="_blank" rel="external">http://www.pylot.org/download.html</a></p>
<p>给一个网盘下载地址</p>
<p>链接:<a href="http://pan.baidu.com/s/1boxprSN" target="_blank" rel="external"> http://pan.baidu.com/s/1boxprSN</a> 密码: qjcd</p>
<h1 id="在fedora-23上安装依赖软件"><a href="#在fedora-23上安装依赖软件" class="headerlink" title="在fedora 23上安装依赖软件"></a>在fedora 23上安装依赖软件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo dnf install python  numpy    wxPython  python-matplotlib</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="编辑安装下testcases-xml"><a href="#编辑安装下testcases-xml" class="headerlink" title="编辑安装下testcases.xml"></a>编辑安装下testcases.xml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;testcases&gt;</div><div class="line">&lt;!-- SAMPLE TEST CASE --&gt;</div><div class="line">&lt;case&gt;</div><div class="line">&lt;url&gt;http://img1.squid.dev/upload/test/upfile_imag1.jpg&lt;/url&gt;</div><div class="line">&lt;/case&gt;</div><div class="line">&lt;!-- SAMPLE TEST CASE --&gt;</div><div class="line">&lt;!--</div><div class="line">&lt;case&gt;</div><div class="line">&lt;url&gt;http://search.yahooapis.com/WebSearchService/V1/webSearch&lt;/url&gt;</div><div class="line">&lt;method&gt;POST&lt;/method&gt;</div><div class="line">&lt;body&gt;&lt;![CDATA[appid=YahooDemo&amp;query=pylot]]&gt;&lt;/body&gt;</div><div class="line">&lt;add_header&gt;Content-type: application/x-www-form-urlencoded&lt;/add_header&gt;</div><div class="line">&lt;/case&gt;</div><div class="line">--&gt;</div><div class="line">&lt;/testcases&gt;</div></pre></td></tr></table></figure>
<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[grug@localhost pylot_1.26]$ python run.py -a 2 -d 10 -o /home/grug/pylot_1.26</div></pre></td></tr></table></figure>
<p>其中-a 是代理个数，-d 压力测试时间 -o 结果输出目录。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-------------------------------------------------</div><div class="line">Test parameters:</div><div class="line">number of agents: 2</div><div class="line">test duration in seconds: 10</div><div class="line">rampup in seconds: 0</div><div class="line">interval in milliseconds: 0</div><div class="line">test case xml: testcases.xml</div><div class="line">log messages: True</div><div class="line">output directory: /home/grug/pylot_1.26</div><div class="line"></div><div class="line">Started agent 2</div><div class="line"></div><div class="line">All agents running...</div><div class="line">[################100%##################] 10s/10s</div><div class="line"></div><div class="line">Requests: 606</div><div class="line">Errors: 0</div><div class="line">Avg Response Time: 0.023</div><div class="line">Avg Throughput: 60.29</div><div class="line">Current Throughput: 082</div><div class="line">Bytes Received: 6544194</div><div class="line"></div><div class="line">-------------------------------------------------</div><div class="line"></div><div class="line">Generating Results...</div><div class="line">Generating Graphs...</div><div class="line">ERROR: Unable to generate graphs with Matplotlib</div><div class="line"></div><div class="line">Done generating results. You can view your test at:</div><div class="line">/home/grug/pylot_1.26/results_2015.12.11_13.31.31/results.html</div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure></p>
<h1 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h1><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/pylot_result.jpg" alt=""></p>
<p>可以看到有两个图片没有显示，原因是上文执行日志</p>
<p><span style="color: #ff0000;">ERROR: Unable to generate graphs with Matplotlib</span></p>
<p><span style="color: #000000;">现在还没有找到原因，继续研究中。</span></p>
<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>run.py 参数理解</p>
<pre><code>usage: run.py [options] args
  -a, --agents=NUM_AGENTS     :  number of agents  #代理个数
  -d, --duration=DURATION     :  test duration in seconds #测试持续时间
  -r, --rampup=RAMPUP         :  rampup in seconds # 要在多长时间内建立全部的线程。如果未指定,将立即建立所有线程。
                                                     假设设置成T 秒，代理设置成N个， pylot 将每隔T/N秒建立一个线程。
  -i, --interval=INTERVAL     :  interval in milliseconds #每个请求间隔？不确定
  -x, --xmlfile=TEST_CASE_XML :  test case xml file  #配置文件
  -o, --output_dir=PATH       :  output directory #结果输出目录
  -n, --name=TESTNAME         :  name of test  #名称
  -l, --log_msgs              :  log messages #显示日志
  -b, --blocking              :  blocking mode #阻断模式，不打印日志，直到结束，返回xml结果
  -g, --gui                   :  start GUI #gui 模式
  -p, --port=PORT             :  xml-rpc listening port   #远程调用时有用
</code></pre><p>请参考<a href="http://www.pylot.org/gettingstarted.html" target="_blank" rel="external">http://www.pylot.org/gettingstarted.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux网络代理配置]]></title>
      <url>http://grug.tech/2015/12/10/linux-proxy-config/</url>
      <content type="html"><![CDATA[<p>linux下配置网络代理</p>
<p>直接编辑主目录下的 .bash_profile文件</p>
<p>增加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http_proxy=172.16.10.101:3128 #代理服务器ip：port</div><div class="line">no_proxy=localhost,127.0.0.1 #不用代理的节点</div><div class="line">export http_proxy no_proxy</div></pre></td></tr></table></figure></p>
<p>使生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker常用命令（2）]]></title>
      <url>http://grug.tech/2015/12/10/docker-command-2/</url>
      <content type="html"><![CDATA[<p>本文转自 <a href="http://seanlook.com/2014/11/05/docker-command-best-use-2" target="_blank" rel="external">http://seanlook.com/2014/11/05/docker-command-best-use-2</a></p>
<p>以下是原文</p>
<h1 id="开启-停止-重启container（start-stop-restart）"><a href="#开启-停止-重启container（start-stop-restart）" class="headerlink" title="开启/停止/重启container（start/stop/restart）"></a>开启/停止/重启container（start/stop/restart）</h1><p>容器可以通过run新建一个来运行，也可以重新start已经停止的container，但start不能够再指定容器启动时运行的指令，因为docker只能有一个前台进程。<br><a id="more"></a><br>容器stop（或Ctrl+D）时，会在保存当前容器的状态之后退出，下次start时保有上次关闭时更改。而且每次进入attach进去的界面是一样的，与第一次run启动或commit提交的时刻相同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">CONTAINER_ID=$(docker start )</div><div class="line">docker stop <span class="variable">$CONTAINER_ID</span></div><div class="line">docker restart <span class="variable">$CONTAINER_ID</span></div></pre></td></tr></table></figure>
<p>关于这几个命令可以通过一个完整的实例使用：docker如何创建一个运行后台进程的容器并同时提供shell终端。</p>
<h1 id="连接到正在运行中的container（attach）"><a href="#连接到正在运行中的container（attach）" class="headerlink" title="连接到正在运行中的container（attach）"></a>连接到正在运行中的container（attach）</h1><p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。<br>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上–sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker attach --sig-proxy=false $CONTAINER_ID</span></div></pre></td></tr></table></figure></p>
<h1 id="查看image或container的底层信息（inspect）"><a href="#查看image或container的底层信息（inspect）" class="headerlink" title="查看image或container的底层信息（inspect）"></a>查看image或container的底层信息（inspect）</h1><p>inspect的对象可以是image、运行中的container和停止的container。</p>
<p>查看容器的内部IP<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' $CONTAINER_ID172.17.42.35</span></div></pre></td></tr></table></figure></p>
<h1 id="删除一个或多个container、image（rm、rmi）"><a href="#删除一个或多个container、image（rm、rmi）" class="headerlink" title="删除一个或多个container、image（rm、rmi）"></a>删除一个或多个container、image（rm、rmi）</h1><p>你可能在使用过程中会build或commit许多镜像，无用的镜像需要删除。但删除这些镜像是有一些条件的：</p>
<p>同一个IMAGE ID可能会有多个TAG（可能还在不同的仓库），首先你要根据这些 image names 来删除标签，当删除最后一个tag的时候就会自动删除镜像；<br>承上，如果要删除的多个IMAGE NAME在同一个REPOSITORY，可以通过docker rmi 来同时删除剩下的TAG；若在不同Repo则还是需要手动逐个删除TAG；<br>还存在由这个镜像启动的container时（即便已经停止），也无法删除镜像；<br>如何查看镜像与容器的依存关系</p>
<p>删除容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker rm &lt;container_id/contaner_name&gt;</div></pre></td></tr></table></figure></p>
<p>删除所有停止的容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker rm $(docker ps <span class="_">-a</span> -q)</div></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker rmi &lt;image_id/image_name ...&gt;</div></pre></td></tr></table></figure></p>
<p>下面是一个完整的示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker images</span></div><div class="line">ubuntu 13.10 195eb90b5349 4 months ago 184.6 MB</div><div class="line">ubuntu saucy 195eb90b5349 4 months ago 184.6 MB</div><div class="line">seanlook/ubuntu rm_test 195eb90b5349 4 months ago 184.6 MB</div></pre></td></tr></table></figure></p>
<p>使用195eb90b5349启动、停止一个容器后，删除这个镜像<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker rmi 195eb90b5349</span></div><div class="line">Error response from daemon: Conflict, cannot delete image 195eb90b5349 because it is</div><div class="line">tagged <span class="keyword">in</span> multiple repositories, use <span class="_">-f</span> to force</div><div class="line">2014/11/04 14:19:00 Error: failed to remove one or more images</div></pre></td></tr></table></figure></p>
<p>删除seanlook仓库中的tag<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker rmi seanlook/ubuntu:rm_testUntagged: seanlook/ubuntu:rm_test</span></div></pre></td></tr></table></figure></p>
<p>现在删除镜像，还会由于container的存在不能rmi<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker rmi 195eb90b5349</span></div><div class="line">Error response from daemon: Conflict, cannot delete 195eb90b5349 because the</div><div class="line">container eef3648a6e77 is using it, use <span class="_">-f</span> to force</div><div class="line">2014/11/04 14:24:15 Error: failed to remove one or more images</div></pre></td></tr></table></figure></p>
<p>先删除由这个镜像启动的容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker rm eef3648a6e77</span></div></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker rmi 195eb90b5349Deleted: 195eb90b534950d334188c3627f860fbdf898e224d8a0a11ec54ff453175e081</span></div><div class="line">Deleted: 209ea56fda6dc2fb013e4d1e40cb678b2af91d1b54a71529f7df0bd867adc961</div><div class="line">Deleted: 0f4aac48388f5d65a725ccf8e7caada42f136026c566528a5ee9b02467dac90a</div><div class="line">Deleted: fae16849ebe23b48f2bedcc08aaabd45408c62b531ffd8d3088592043d5e7364</div><div class="line">Deleted: f127542f0b6191e99bb015b672f5cf48fa79d974784ac8090b11aeac184eaaff</div></pre></td></tr></table></figure></p>
<p>注意，上面的删除过程我所举的例子比较特殊——镜像被tag在多个仓库，也有启动过的容器。按照&lt;==指示的顺序进行即可。</p>
<h1 id="docker-build-使用此配置生成新的image"><a href="#docker-build-使用此配置生成新的image" class="headerlink" title="docker build 使用此配置生成新的image"></a>docker build 使用此配置生成新的image</h1><p>build命令可以从Dockerfile和上下文来创建镜像：</p>
<p>docker build [OPTIONS] PATH | URL | -</p>
<p>上面的PATH或URL中的文件被称作上下文，build image的过程会先把这些文件传送到docker的服务端来进行的。 如果PATH直接就是一个单独的Dockerfile文件则可以不需要上下文；如果URL是一个Git仓库地址，那么创建image的过程中会自动git clone一份到本机的临时目录，它就成为了本次build的上下文。无论指定的PATH是什么，Dockerfile是至关重要的，请参考Dockerfile Reference。</p>
<p>请看下面的例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># cat Dockerfile</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">FROM seanlook/nginx:bash_vim</div><div class="line">EXPOSE 80</div><div class="line">ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp;  /bin/bash</div><div class="line"># docker build -t seanlook/nginx:bash_vim_Df .</div><div class="line">Sending build context to Docker daemon 73.45 MB</div><div class="line">Sending build context to Docker daemon</div><div class="line">Step 0 : FROM seanlook/nginx:bash_vim ---&gt; aa8516fa0bb7</div><div class="line">Step 1 : EXPOSE 80</div><div class="line">---&gt;Using cache---&gt; fece07e2b515</div><div class="line">Step 2 : ENTRYPOINT /usr/sbin/nginx -c /etc/nginx/nginx.conf &amp;&amp;  /bin/bash</div><div class="line">---&gt; Running in e08963fd5afb---&gt; d9bbd13f5066</div><div class="line">Removing intermediate container e08963fd5afb</div><div class="line">Successfully built d9bbd13f5066</div></pre></td></tr></table></figure>
<p>上面的PATH为.，所以在当前目录下的所有文件（不包括.dockerignore中的）将会被tar打包并传送到docker daemon（一般在本机），从输出我们可以到Sending build context…，最后有个Removing intermediate container的过程，可以通过–rm=false来保留容器。<br>TO-DO<br>docker build github.com/creack/docker-firefox失败。</p>
<h1 id="给镜像打上标签（tag）"><a href="#给镜像打上标签（tag）" class="headerlink" title="给镜像打上标签（tag）"></a>给镜像打上标签（tag）</h1><p>tag的作用主要有两点：一是为镜像起一个容易理解的名字，二是可以通过docker tag来重新指定镜像的仓库，这样在push时自动提交到仓库。</p>
<p>将同一IMAGE_ID的所有tag，合并为一个新的<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker tag 195eb90b5349 seanlook/ubuntu:rm_test</span></div></pre></td></tr></table></figure></p>
<p>新建一个tag，保留旧的那条记录<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># docker tag Registry/Repos:Tag New_Registry/New_Repos:New_Tag</div></pre></td></tr></table></figure></p>
<h1 id="查看容器的信息container（ps）"><a href="#查看容器的信息container（ps）" class="headerlink" title="查看容器的信息container（ps）"></a>查看容器的信息container（ps）</h1><p>docker ps命令可以查看容器的CONTAINER ID、NAME、IMAGE NAME、端口开启及绑定、容器启动后执行的COMMNAD。经常通过ps来找到CONTAINER_ID。<br>docker ps 默认显示当前正在运行中的container<br>docker ps -a 查看包括已经停止的所有容器<br>docker ps -l 显示最新启动的一个容器（包括已停止的）</p>
<h1 id="看容器中正在运行的进程（top）"><a href="#看容器中正在运行的进程（top）" class="headerlink" title="看容器中正在运行的进程（top）"></a>看容器中正在运行的进程（top）</h1><p>容器运行时不一定有/bin/bash终端来交互执行top命令，查看container中正在运行的进程，况且还不一定有top命令，这是docker top <container_id container_name="">就很有用了。实际上在host上使用ps -ef|grep docker也可以看到一组类似的进程信息，把container里的进程看成是host上启动docker的子进程就对了。</container_id></p>
<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><p>docker还有一些如login、cp、logs、export、import、load、kill等不是很常用的命令，比较简单，请参考官网。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker常用命令（1）]]></title>
      <url>http://grug.tech/2015/12/10/docker-command-1/</url>
      <content type="html"><![CDATA[<p>本文转自 <a href="http://seanlook.com/2014/11/05/docker-command-best-use-1" target="_blank" rel="external">http://seanlook.com/2014/11/05/docker-command-best-use-1</a></p>
<p>以下是原文</p>
<p>本文记录docker命令在大部分情境下的使用，如果想了解每一个选项的细节，请参考官方文档，这里只作为自己以后的备忘记录下来。</p>
<p>根据自己的理解，总的来说分为以下几种：</p>
<ul>
<li>容器生命周期管理 — <code>docker [run|start|stop|restart|kill|rm|pause|unpause]</code></li>
<li>容器操作运维 — <code>docker [ps|inspect|top|attach|events|logs|wait|export|port]</code></li>
<li>容器rootfs命令 — <code>docker [commit|cp|diff]</code></li>
<li>镜像仓库 — <code>docker [login|pull|push|search]</code></li>
<li>本地镜像管理 — <code>docker [images|rmi|tag|build|history|save|import]</code></li>
<li>其他命令 — <code>docker [info|version]</code></li>
</ul>
<a id="more"></a>
<p>看一个变迁图<br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/change-command.jpg" alt=""></p>
<h1 id="列出机器上的镜像（images）"><a href="#列出机器上的镜像（images）" class="headerlink" title="列出机器上的镜像（images）"></a>列出机器上的镜像（images）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker images </span></div><div class="line">REPOSITORY            TAG             IMAGE ID        CREATED         VIRTUAL SIZE</div><div class="line">ubuntu                14.10           2185fd50e2ca    13days ago     236.9 MB</div><div class="line">…</div></pre></td></tr></table></figure>
<p>其中我们可以根据REPOSITORY来判断这个镜像是来自哪个服务器，如果没有 / 则表示官方镜像，类似于<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">username/repos_name</div></pre></td></tr></table></figure></p>
<p>表示Github的个人公共库，类似于<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">regsistory.example.com:5000/repos_</div></pre></td></tr></table></figure></p>
<p>name则表示的是私服。<br>IMAGE ID列其实是缩写，要显示完整则带上<code>--no-trunc</code>选项</p>
<h1 id="在docker-index中搜索image（search）"><a href="#在docker-index中搜索image（search）" class="headerlink" title="在docker index中搜索image（search）"></a>在docker index中搜索image（search）</h1><p><code>Usage: docker search TERM</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker search seanlo</span></div><div class="line">NAME                DESCRIPTION           STARS     OFFICIAL   AUTOMATED</div><div class="line">seanloook/centos6   sean<span class="string">'s docker repos         0</span></div></pre></td></tr></table></figure></p>
<p>搜索的范围是官方镜像和所有个人公共镜像。NAME列的 / 后面是仓库的名字。</p>
<h1 id="从docker-registry-server-中下拉image或repository（pull）"><a href="#从docker-registry-server-中下拉image或repository（pull）" class="headerlink" title="从docker registry server 中下拉image或repository（pull）"></a>从docker registry server 中下拉image或repository（pull）</h1><p><code>Usage: docker pull [OPTIONS] NAME[:TAG]</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker pull centos</span></div></pre></td></tr></table></figure></p>
<p>上面的命令需要注意，在docker v1.2版本以前，会下载官方镜像的centos仓库里的所有镜像，<br>而从v.13开始官方文档里的说明变了：will pull the centos:latest image, its intermediate layers and any aliases of the same id，也就是只会下载tag为latest的镜像（以及同一images id的其他tag）。<br>也可以明确指定具体的镜像：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker pull centos:centos6</span></div></pre></td></tr></table></figure></p>
<p>当然也可以从某个人的公共仓库（包括自己是私人仓库）拉取，形如<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker pull username/repository&lt;:tag_name&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker pull seanlook/centos:centos6</span></div></pre></td></tr></table></figure>
<p>如果你没有网络，或者从其他私服获取镜像，形如<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker pull registry.domain.com:5000/repos:&lt;:tag_name&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker pull dl.dockerpool.com:5000/mongo:latest</span></div></pre></td></tr></table></figure>
<h1 id="推送一个image或repository到registry（push）"><a href="#推送一个image或repository到registry（push）" class="headerlink" title="推送一个image或repository到registry（push）"></a>推送一个image或repository到registry（push）</h1><p>与上面的pull对应，可以推送到Docker Hub的Public、Private以及私服，但不能推送到Top Level Repository。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker push seanlook/mongo</span></div><div class="line"><span class="comment"># docker push registry.tp-link.net:5000/mongo:2014-10-27</span></div></pre></td></tr></table></figure>
<p>registry.tp-link.net也可以写成IP，172.29.88.222。<br>在repository不存在的情况下，命令行下push上去的会为我们创建为私有库，然而通过浏览器创建的默认为公共库。</p>
<h1 id="从image启动一个container（run）"><a href="#从image启动一个container（run）" class="headerlink" title="从image启动一个container（run）"></a>从image启动一个container（run）</h1><p><code>docker run</code>命令首先会从特定的image创之上create一层可写的container，然后通过start命令来启动它。停止的container可以重新启动并保留原来的修改。run命令启动参数有很多，以下是一些常规使用说明，更多部分请参考<a href="http://www.cnphp6.com/archives/24899" target="_blank" rel="external">http://www.cnphp6.com/archives/24899</a><br>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止<br><code>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></li>
</ul>
<h1 id="使用image创建container并执行相应命令，然后停止"><a href="#使用image创建container并执行相应命令，然后停止" class="headerlink" title="使用image创建container并执行相应命令，然后停止"></a>使用image创建container并执行相应命令，然后停止</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker run ubuntu echo "hello world"</span></div><div class="line">hello  word</div></pre></td></tr></table></figure>
<p>这是最简单的方式，跟在本地直接执行<code>echo &#39;hello world&#39;</code> 几乎感觉不出任何区别，而实际上它会从本地ubuntu:latest镜像启动到一个容器，并执行打印命令后退出（<code>docker ps -l</code>可查看）。需要注意的是，默认有一个<code>--rm=true</code>参数，即完成操作后停止容器并从文件系统移除。因为Docker的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。<br>容器启动后会自动随机生成一个<code>CONTAINER ID</code>，这个ID在后面commit命令后可以变为<code>IMAGE ID</code></p>
<h2 id="使用image创建container并进入交互模式-login-shell是-bin-bash"><a href="#使用image创建container并进入交互模式-login-shell是-bin-bash" class="headerlink" title="使用image创建container并进入交互模式, login shell是/bin/bash"></a>使用image创建container并进入交互模式, login shell是/bin/bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker run -i -t --name mytest centos:centos6 /bin/bash</span></div><div class="line">bash-4.1<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>上面的<code>--name</code>参数可以指定启动后的容器名字，如果不指定则docker会帮我们取一个名字。镜像<code>centos:centos6</code>也可以用<code>IMAGE ID</code> (68edf809afe7) 代替），并且会启动一个伪终端，但通过ps或top命令我们却只能看到一两个进程，因为容器的核心是所执行的应用程序，所需要的资源都是应用程序运行所必需的，除此之外，并没有其它的资源，可见Docker对资源的利用率极高。此时使用exit或Ctrl+D退出后，这个容器也就消失了（消失后的容器并没有完全删除？）<br>（那么多个TAG不同而IMAGE ID相同的的镜像究竟会运行以哪一个TAG启动呢</p>
<h1 id="运行出一个container放到后台运行"><a href="#运行出一个container放到后台运行" class="headerlink" title="运行出一个container放到后台运行"></a>运行出一个container放到后台运行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 2; done"</span></div><div class="line">ae60c4b642058fefcc61ada85a610914bed9f5df0e2aa147100eab85cea785dc</div></pre></td></tr></table></figure>
<p>它将直接把启动的container挂起放在后台运行（这才叫saas），并且会输出一个<code>CONTAINER ID</code>，通过<code>docker ps</code>可以看到这个容器的信息，可在container外面查看它的输出<code>docker logs ae60c4b64205</code>，也可以通过<code>docker attach ae60c4b64205</code>连接到这个正在运行的终端，此时在<code>Ctrl+C</code>退出container就消失了，按ctrl-p ctrl-q可以退出到宿主机，而保持container仍然在运行<br>另外，如果-d启动但后面的命令执行完就结束了，如<code>/bin/bash</code>、<code>echo test</code>，则container做完该做的时候依然会终止。而且-d不能与–rm同时使用<br>可以通过这种方式来运行memcached、apache等。</p>
<h1 id="映射host到container的端口和目录"><a href="#映射host到container的端口和目录" class="headerlink" title="映射host到container的端口和目录"></a>映射host到container的端口和目录</h1><p>映射主机到容器的端口是很有用的，比如在container中运行memcached，端口为11211，运行容器的host可以连接container的 internel_ip:11211 访问，如果有从其他主机访问memcached需求那就可以通过-p选项，形如<code>-p &lt;host_port:contain_port&gt;</code>，存在以下几种写法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-p 11211:11211这个即是默认情况下，绑定主机所有网卡（0.0.0.0）的11211端口到容器的11211端口上</div><div class="line">-p 127.0.0.1:11211:11211 只绑定localhost这个接口的11211端口</div><div class="line">-p 127.0.0.1::5000</div><div class="line">-p 127.0.0.1:80:8080</div><div class="line"></div><div class="line">目录映射其实是“绑定挂载”host的路径到container的目录，这对于内外传送文件比较方便，在搭建私服那一节，为了避免私服container停止以后保存的images不被删除，就要把提交的images保存到挂载的主机目录下。使用比较简单，`-v &lt;host_path:container_path&gt;`，绑定多个目录时再加`-v`。</div></pre></td></tr></table></figure></p>
<p>-v /tmp/docker:/tmp/docker<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">另外在两个container之间建立联系可用`--link`，详见高级部分或[官方文档](http://docs.docker.com/v1.1/reference/commandline/cli/#run)。</div><div class="line">下面是一个例子：</div><div class="line"></div><div class="line">``` bash</div><div class="line"># docker run --name nginx_test \&amp;gt; -v /tmp/docker:/usr/share/nginx/html:ro \&amp;gt; -p 80:80 -d \&amp;gt; nginx:1.7.6</div></pre></td></tr></table></figure></p>
<p>在主机的/tmp/docker下建立index.html，就可以通过<code>http://localhost:80/</code>或<code>http://host-ip:80</code>访问了。</p>
<h1 id="将一个container固化为一个新的image（commit）"><a href="#将一个container固化为一个新的image（commit）" class="headerlink" title="将一个container固化为一个新的image（commit）"></a>将一个container固化为一个新的image（commit）</h1><p>当我们在制作自己的镜像的时候，会在container中安装一些工具、修改配置，如果不做commit保存起来，那么container停止以后再启动，这些更改就消失了。<br><code>docker commit &lt;container&gt; [repo:tag]</code><br>后面的repo:tag可选<br>只能提交正在运行的container，即通过<code>docker ps</code>可以看见的容器，</p>
<p>查看刚运行过的容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># docker ps -l</span></div><div class="line">CONTAINER ID   IMAGE     COMMAND      CREATED       STATUS        PORTS   NAMES</div><div class="line">c9fdf26326c9   nginx:1   nginx -g..   3 hours ago   Exited (0)..     nginx_test</div></pre></td></tr></table></figure></p>
<p>启动一个已存在的容器（run是从image新建容器后再启动），以下也可以使用docker start nginx_test代替<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@hostname docker]<span class="comment"># docker start c9fdf26326c9c9fdf26326c9</span></div><div class="line">docker run -i -t --sig-proxy=<span class="literal">false</span> 2ffe545748baf /bin/bash</div><div class="line">nginx服务没有启动</div><div class="line"><span class="comment"># docker commit -m "some tools installed" fcbd0a5348ca seanlook/ubuntu:14.10_tutorial</span></div><div class="line">fe022762070b09866eaab47bc943ccb796e53f3f416abf3f2327481b446a9503</div></pre></td></tr></table></figure></p>
<p>请注意，当你反复去commit一个容器的时候，每次都会得到一个新的<code>IMAGE ID</code>，假如后面的<code>repository:tag</code>没有变，通过<code>docker images</code>可以看到，之前提交的那份镜像的<code>repository:tag</code>就会变成<code>&lt;none&gt;:&lt;none&gt;</code>，所以尽量避免反复提交。<br>另外，观察以下几点:</p>
<ul>
<li><p>commit container只会pause住容器，这是为了保证容器文件系统的一致性，但不会stop。如果你要对这个容器继续做其他修改：</p>
<ul>
<li>你可以重新提交得到新image2，删除次新的image1</li>
<li>也可以关闭容器用新image1启动，继续修改，提交image2后删除image1</li>
<li>当然这样会很痛苦，所以一般是采用<code>Dockerfile</code>来<code>build</code>得到最终image，参考[]</li>
</ul>
</li>
<li><p>虽然产生了一个新的image，并且你可以看到大小有100MB，但从commit过程很快就可以知道实际上它并没有独立占用100MB的硬盘空间，而只是在旧镜像的基础上修改，它们共享大部分公共的“片”。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[squid作负载均衡服务器实例]]></title>
      <url>http://grug.tech/2015/12/03/squid-cache-server-instance/</url>
      <content type="html"><![CDATA[<p>Squid cache（简称为Squid）是一个流行的自由软件，它符合GNU通用公共许可证。Squid作为网页服务器的前置cache服务器，可以代理用户向web服务器请求数据并进行缓存，也可以用在局域网中，使局域网用户通过代理上网。(来自百度百科-squid)<br><a id="more"></a><br>本文以squid作负载均衡服务器来说明如何使用squid</p>
<p>环境</p>
<p>三台fedora机器,Ip如结构图</p>
<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/squid_new.jpg" alt="squid"></p>
<h3 id="在14机器安装squid"><a href="#在14机器安装squid" class="headerlink" title="在14机器安装squid"></a>在14机器安装squid</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$sudo</span> dnf install squid</div></pre></td></tr></table></figure>
<h3 id="在16和15安装nginx"><a href="#在16和15安装nginx" class="headerlink" title="在16和15安装nginx"></a>在16和15安装nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo dnf install nginx</div></pre></td></tr></table></figure>
<h3 id="配置squid"><a href="#配置squid" class="headerlink" title="配置squid"></a>配置squid</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$sudo</span> vim /etc/squid/squid.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">http_port 80 accel vhost  #监听80商品</div><div class="line">http_access allow all  #允许所有链接访问</div><div class="line">cache_peer 192.168.101.16 parent 80 0 originserver round-robin weight=1 #设置权重，轮询访问</div><div class="line">cache_peer 192.168.101.15 parent 80 0 originserver round-robin weight=1</div><div class="line">cache_mem 64 MB #缓存内存大小</div><div class="line">cache_dir ufs /var/spool/squid 100 16 256 #缓存目录</div><div class="line">visible_hostname squid.dev#缓存名称</div></pre></td></tr></table></figure>
<p>启动squid服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$sudo</span> service squid start</div></pre></td></tr></table></figure></p>
<h3 id="修改15和16nginx的首页，以便测试"><a href="#修改15和16nginx的首页，以便测试" class="headerlink" title="修改15和16nginx的首页，以便测试"></a>修改15和16nginx的首页，以便测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$sudo</span> vim /user/share/nginx/html/index.html</div><div class="line"><span class="comment">#启动nginx</span></div><div class="line"><span class="variable">$sudo</span> service nginx start</div></pre></td></tr></table></figure>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>访问 <a href="http://192.168.101.14" target="_blank" rel="external">http://192.168.101.14</a></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/squid_15.png" alt=""></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/squid_16.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker Swarm实战（2）-创建Swarm开发环境]]></title>
      <url>http://grug.tech/2015/12/02/create-swarm-development-environment/</url>
      <content type="html"><![CDATA[<p>本文来搭建Docker Swarm的开发环境。</p>
<h1 id="用Docker-Hub提供的服务发现节点"><a href="#用Docker-Hub提供的服务发现节点" class="headerlink" title="用Docker Hub提供的服务发现节点"></a>用Docker Hub提供的服务发现节点</h1><h2 id="在所有节点上安装Swarm"><a href="#在所有节点上安装Swarm" class="headerlink" title="在所有节点上安装Swarm"></a>在所有节点上安装Swarm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[glovee@localhost ~]$ docker pull  swarm</div></pre></td></tr></table></figure>
<h2 id="修改每个节点Docker配置文件"><a href="#修改每个节点Docker配置文件" class="headerlink" title="修改每个节点Docker配置文件"></a>修改每个节点Docker配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#centos 是/etc/sysconfig/docker</div><div class="line">#ubuntu是/etc/default/docker</div><div class="line">sudo vim /etc/sysconfig/docker</div></pre></td></tr></table></figure>
<p>添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">D0OCKER_OPTS=”-H 0.0.0.0:2375 –H unix:///var/run/docker.sock”</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#重新启动docker</span></div><div class="line">sudo service restart docker</div></pre></td></tr></table></figure>
<h2 id="任一一个节点-创建一个集群"><a href="#任一一个节点-创建一个集群" class="headerlink" title="任一一个节点 创建一个集群"></a>任一一个节点 创建一个集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#下面的命令在Dokcer hub上创建了全球唯一标识,要记录这个标识，以便子节点加入集群时使用</span></div><div class="line">[glovee@localhost ~]$ docker run --rm swarm create</div><div class="line">e9edd7dea9adcb862a85ade444d1fcad</div></pre></td></tr></table></figure>
<h2 id="测试三台机器之间是否可以Ping通，只有在Ping通的情况下才可以搭建。"><a href="#测试三台机器之间是否可以Ping通，只有在Ping通的情况下才可以搭建。" class="headerlink" title="测试三台机器之间是否可以Ping通，只有在Ping通的情况下才可以搭建。"></a>测试三台机器之间是否可以Ping通，只有在Ping通的情况下才可以搭建。</h2><p><span style="color: #ff0000;">记住要关闭防火墙，iptables,或者firewall</span></p>
<h2 id="在每个子节点中执行加入集群命令"><a href="#在每个子节点中执行加入集群命令" class="headerlink" title="在每个子节点中执行加入集群命令"></a>在每个子节点中执行加入集群命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#加入集群</span></div><div class="line">[glovee@localhost ~]$ docker run <span class="_">-d</span> swarm join --addr=192.168.101.16:2375 token://e9edd7dea9adcb862a85ade444d1fcad</div><div class="line">ed89d951528a105dce570dd6aec6bc06f87b6db12af471ca93e179bb0d272b98</div><div class="line"><span class="comment">#另一个节点</span></div><div class="line">[grug@localhost ~]$ docker run <span class="_">-d</span> swarm join --addr=192.168.101.14:2375 token://e9edd7dea9adcb862a85ade444d1fcad</div><div class="line">6dbfd5520607e3<span class="built_in">cd</span>161eb90a15fe3a272aada3b3ec3df3eaeb44ae70f67cecec</div></pre></td></tr></table></figure>
<p>上面的–addr=xxx:2375是子节点ip地址</p>
<h2 id="在管理节点上启动swarm-manage"><a href="#在管理节点上启动swarm-manage" class="headerlink" title="在管理节点上启动swarm manage"></a>在管理节点上启动swarm manage</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#启动集成管理，这里在192.168.101.16这台机器</span></div><div class="line">[glovee@localhost ~]$ docker run <span class="_">-d</span> -p 2376:2375 swarm manage token://e9edd7dea9adcb862a85ade444d1fcad</div><div class="line">b00179ae26e75a3d9570a4d9a06ac06a24b03978f6bbf411b8a35b3cb7067337</div></pre></td></tr></table></figure>
<h2 id="查看操作集群信息"><a href="#查看操作集群信息" class="headerlink" title="查看操作集群信息"></a>查看操作集群信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[grug@localhost ~]$ docker -H 192.168.101.16:2376 info</div><div class="line">Containers: 102</div><div class="line">Images: 26</div><div class="line">Role: primary</div><div class="line">Strategy: spread</div><div class="line">Filters: health, port, dependency, affinity, constraint</div><div class="line">Nodes: 2</div><div class="line">localhost.localdomain: 192.168.101.14:2375</div><div class="line">└ Containers: 8</div><div class="line">└ Reserved CPUs: 0 / 2</div><div class="line">└ Reserved Memory: 0 B / 513.8 MiB</div><div class="line">└ Labels: executiondriver=native-0.2, kernelversion=4.2.5-300.fc23.x86_64, operatingsystem=Fedora 23 (Server Edition), storagedriver=devicemapper</div><div class="line">localhost.localdomain: 192.168.101.16:2375</div><div class="line">└ Containers: 94</div><div class="line">└ Reserved CPUs: 0 / 2</div><div class="line">└ Reserved Memory: 0 B / 513.8 MiB</div><div class="line">└ Labels: executiondriver=native-0.2, kernelversion=4.1.7-200.fc22.x86_64, operatingsystem=Fedora 22 (Twenty Two), storagedriver=devicemapper</div><div class="line">CPUs: 4</div><div class="line">Total Memory: 1.004 GiB</div><div class="line">Name: bc4dea2b3016</div></pre></td></tr></table></figure>
<h2 id="其它操作命令"><a href="#其它操作命令" class="headerlink" title="其它操作命令"></a>其它操作命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker -H tcp://&lt;manager_ip:manager_port&gt; info</div><div class="line"></div><div class="line">docker -H tcp://&lt;manager_ip:manager_port&gt; run</div><div class="line"></div><div class="line">docker -H tcp://&lt;manager_ip:manager_port&gt; ps</div><div class="line"></div><div class="line">docker -H tcp://&lt;manager_ip:manager_port&gt; logs ...</div></pre></td></tr></table></figure>
<h1 id="用文件存储来当发现节点"><a href="#用文件存储来当发现节点" class="headerlink" title="用文件存储来当发现节点"></a>用文件存储来当发现节点</h1><h2 id="输出集群信息到文件"><a href="#输出集群信息到文件" class="headerlink" title="输出集群信息到文件"></a>输出集群信息到文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[glovee@localhost ~]$ <span class="built_in">echo</span> 192.168.101.16:2375 &gt;&gt; cluster</div><div class="line">[glovee@localhost ~]$ <span class="built_in">echo</span> 192.168.101.14:2375 &gt;&gt; cluster</div></pre></td></tr></table></figure>
<h2 id="启动管理，这里在16机器上"><a href="#启动管理，这里在16机器上" class="headerlink" title="启动管理，这里在16机器上"></a>启动管理，这里在16机器上</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[glovee@localhost ~]$ docker run <span class="_">-d</span> -p 2376:2375 -v $(<span class="built_in">pwd</span>)/cluster:/tmp/cluster swarm manage file:///tmp/cluster</div><div class="line">bc4dea2b3016f0a1882002b1db46ccfc3bdaf99661ad80572c4ca0a40a2be311</div></pre></td></tr></table></figure>
<p>其它与上文的方式一样</p>
<p>用文件存储可以防止出现</p>
<p>time=”2015-12-02T05:46:40Z” level=error msg=”Post <a href="https://discovery.hub.docker.com/v1/clusters/e9edd7dea9adcb862a85ade444d1fcad?ttl=60" target="_blank" rel="external">https://discovery.hub.docker.com/v1/clusters/e9edd7dea9adcb862a85ade444d1fcad?ttl=60</a>: dial tcp: i/o timeout” 的问题</p>
<p>缺点是一旦启动，不能添加新的节点。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker Swarm实战（1）-以Docker Machine建立docker集群]]></title>
      <url>http://grug.tech/2015/11/23/create-docker-cluster-with-docker-machine/</url>
      <content type="html"><![CDATA[<p>Docker Swarm是docker官方的集群工具。下面根据官方文档来进行实战。</p>
<p>本文是以Docker Machine方式创建Docker集群</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>已经本地建立好一个名为local的虚拟机。</p>
<h1 id="启动虚拟机并切换到local-session"><a href="#启动虚拟机并切换到local-session" class="headerlink" title="启动虚拟机并切换到local session."></a>启动虚拟机并切换到local session.</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">eval</span><span class="string">"<span class="variable">$(docker-machine env local)</span>"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-local.png" alt=""></p>
<h1 id="在local-上安装Swarm"><a href="#在local-上安装Swarm" class="headerlink" title="在local 上安装Swarm"></a>在local 上安装Swarm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker pull index.alauda.cn/library/swarm</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/swarm</div><div class="line">2bc79aec8ea0: Pull complete</div><div class="line">dc2fb86a875a: Pull complete</div><div class="line">435e648d0f23: Pull complete</div><div class="line">e16042a92d05: Pull complete</div><div class="line">045bd7b00b5b: Pull complete</div><div class="line">3caea1253d76: Pull complete</div><div class="line">2b4c55187a27: Pull complete</div><div class="line">6b40fe7724bd: Pull complete</div><div class="line">Digest: sha256:1ab748e67f00ee34d0bedcb306caede47c02dad3e0e03455d558448c</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> index.alauda.cn/library/swarm:latest</div></pre></td></tr></table></figure>
<h1 id="创建一个swarm"><a href="#创建一个swarm" class="headerlink" title="创建一个swarm"></a>创建一个swarm</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker run index.alauda.cn/library/swarm create</div><div class="line">31f208d1d6b1a9ffd4953f1128f9b795</div></pre></td></tr></table></figure>
<p>保存这个字符串“31f208d1d6b1a9ffd4953f1128f9b795”</p>
<h1 id="创建一个swarm主虚拟机swarm-master"><a href="#创建一个swarm主虚拟机swarm-master" class="headerlink" title="创建一个swarm主虚拟机swarm-master"></a>创建一个swarm主虚拟机swarm-master</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker-machine create <span class="_">-d</span> virtualbox --swarm --swarm-master --swarm-discovery  token://31f208d1d6b1a9ffd4953f1128f9b795 swarm-master</div><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">Waiting <span class="keyword">for</span> machine to be running, this may take a few minutes...</div><div class="line">Machine is running, waiting <span class="keyword">for</span> SSH to be available...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Provisioning created instance...</div><div class="line">Copying certs to the <span class="built_in">local</span> machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Configuring swarm...</div><div class="line">To see how to connect Docker to this machine, run: D:\Program Files\Docker Toolb</div><div class="line">ox\docker-machine.exe env swarm-master</div></pre></td></tr></table></figure>
<h1 id="创建两个swarm节点"><a href="#创建两个swarm节点" class="headerlink" title="创建两个swarm节点"></a>创建两个swarm节点</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">002639@hw002639 MINGW64 ~</div><div class="line">$ docker-machine create \</div><div class="line">&gt; <span class="_">-d</span> virtualbox \</div><div class="line">&gt; --swarm \</div><div class="line">&gt; --swarm-discovery token://31f208d1d6b1a9ffd4953f1128f9b795 \</div><div class="line">&gt; swarm-agent-00</div><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">Waiting <span class="keyword">for</span> machine to be running, this may take a few minutes...</div><div class="line">Machine is running, waiting <span class="keyword">for</span> SSH to be available...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Provisioning created instance...</div><div class="line">Copying certs to the <span class="built_in">local</span> machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Configuring swarm...</div><div class="line">To see how to connect Docker to this machine, run: D:\Program Files\Docker Toolbox\docker-machine.exe env swarm-agent-00</div><div class="line">002639@hw002639 MINGW64 ~</div><div class="line">$ docker-machine create <span class="_">-d</span> virtualbox --swarm --swarm-discovery token://31f208d1d6b1a9ffd4953f1128f9b795 swarm-agent-01</div><div class="line">Running pre-create checks...</div><div class="line">Creating machine...</div><div class="line">Waiting <span class="keyword">for</span> machine to be running, this may take a few minutes...</div><div class="line">Machine is running, waiting <span class="keyword">for</span> SSH to be available...</div><div class="line">Detecting operating system of created instance...</div><div class="line">Provisioning created instance...</div><div class="line">Copying certs to the <span class="built_in">local</span> machine directory...</div><div class="line">Copying certs to the remote machine...</div><div class="line">Setting Docker configuration on the remote daemon...</div><div class="line">Configuring swarm...</div><div class="line">To see how to connect Docker to this machine, run: D:\Program Files\Docker Toolbox\docker-machine.exe env swarm-agent-01</div></pre></td></tr></table></figure>
<h1 id="登录swarm-master管理三台虚拟机的docker"><a href="#登录swarm-master管理三台虚拟机的docker" class="headerlink" title="登录swarm-master管理三台虚拟机的docker"></a>登录swarm-master管理三台虚拟机的docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env --swarm swarm-master)</span>"</span></div><div class="line">002639@hw002639 MINGW64 ~</div><div class="line">$ docker info</div><div class="line">Containers: 4</div><div class="line">Images: 3</div><div class="line">Role: primary</div><div class="line">Strategy: spread</div><div class="line">Filters: health, port, dependency, affinity, constraint</div><div class="line">Nodes: 3</div><div class="line">swarm-agent-00: 192.168.99.106:2376</div><div class="line">Containers: 1</div><div class="line">Reserved CPUs: 0 / 1</div><div class="line">Reserved Memory: 0 B / 1.021 GiB</div><div class="line">Labels: executiondriver=native-0.2, kernelversion=4.1.12-boot2docker, operatingsystem=Boot2Docker 1.9.0 (TCL 6.4); master : 16e4a2a - Tue Nov 3 19:4</div><div class="line">9:22 UTC 2015, provider=virtualbox, storagedriver=aufs</div><div class="line">swarm-agent-01: 192.168.99.107:2376</div><div class="line">Containers: 1</div><div class="line">Reserved CPUs: 0 / 1</div><div class="line">Reserved Memory: 0 B / 1.021 GiB</div><div class="line">Labels: executiondriver=native-0.2, kernelversion=4.1.12-boot2docker, operatingsystem=Boot2Docker 1.9.0 (TCL 6.4); master : 16e4a2a - Tue Nov 3 19:4</div><div class="line">9:22 UTC 2015, provider=virtualbox, storagedriver=aufs</div><div class="line">swarm-master: 192.168.99.108:2376</div><div class="line">Containers: 2</div><div class="line">Reserved CPUs: 0 / 1</div><div class="line">Reserved Memory: 0 B / 1.021 GiB</div><div class="line">Labels: executiondriver=native-0.2, kernelversion=4.1.12-boot2docker, operatingsystem=Boot2Docker 1.9.0 (TCL 6.4); master : 16e4a2a - Tue Nov 3 19:4</div><div class="line">9:22 UTC 2015, provider=virtualbox, storagedriver=aufs</div><div class="line">CPUs: 3</div><div class="line">Total Memory: 3.064 GiB</div><div class="line">Name: d25e20387b15</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-info2.png" alt=""></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-ps.png" alt="docker-ps"></p>
<p>以后启动的顺序 master&gt;agent</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker Machine实战]]></title>
      <url>http://grug.tech/2015/11/23/docker-machine-in-action/</url>
      <content type="html"><![CDATA[<p>Docker Machine是Docker 官方的环境透明化工具。Machine把搭建Dokcer环境的各种方案汇集在了一起，是创建Docker环境的利器。</p>
<p>下面是按照官方文档的实践，供参考。</p>
<a id="more"></a>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>windows7,已经安装了官方的<a href="https://www.docker.com/docker-toolbox" target="_blank" rel="external">Docker Toolbox</a>。</p>
<h1 id="启动Docker-QuickStart-Terminal"><a href="#启动Docker-QuickStart-Terminal" class="headerlink" title="启动Docker QuickStart Terminal"></a>启动Docker QuickStart Terminal</h1><p>第一次运行，会默认新建一个default的虚拟机。以后每次启动，都会检查是否有虚拟机已经启动，如果没有，则启动默认的Boot2Docker虚拟机default。</p>
<h2 id="创建一个docker环境"><a href="#创建一个docker环境" class="headerlink" title="创建一个docker环境"></a>创建一个docker环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$docker</span>-machine create --driver virtualbox dev</div></pre></td></tr></table></figure>
<p>其中 –driver是驱动，这里virtualbox,<span style="color: #ff0000;">在安装toolbox时，要选择安装</span>。</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-create.png" alt="docker-machine-create"></p>
<h2 id="安装好查看已有的用docker-machine创建的虚拟机"><a href="#安装好查看已有的用docker-machine创建的虚拟机" class="headerlink" title="安装好查看已有的用docker-machine创建的虚拟机"></a>安装好查看已有的用docker-machine创建的虚拟机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$docker</span>-machine ls</div></pre></td></tr></table></figure>
<p>上图中 Active表示当前所在的虚拟机，*表示激活状态，-表示未激活。激活意味着可以在当前shell中执行虚拟机docker命令。</p>
<p>为了更好地说明，下面来切换shell的主机会话session到另外的主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env dev)</span>"</span></div><div class="line">$ docker-machine ls</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-ls2.png" alt="docker-machine-ls2"><br>看到当前shell sesseion是dev，同时还显示了一些其它有用的信息，如状态，是启动还是停止，以及ip地址</p>
<p>可以像在dev主机上一样，操作dev上的docker命令。<br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-images.png" alt="docker-machine-images"></p>
<h2 id="通过下面的命令查看某一个虚拟机主机的ip"><a href="#通过下面的命令查看某一个虚拟机主机的ip" class="headerlink" title="通过下面的命令查看某一个虚拟机主机的ip"></a>通过下面的命令查看某一个虚拟机主机的ip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker-machine ip dev</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-ip.png" alt="docker-machine-ip"></p>
<h2 id="通过docker-machine-–help查看更多的命令"><a href="#通过docker-machine-–help查看更多的命令" class="headerlink" title="通过docker-machine –help查看更多的命令"></a>通过docker-machine –help查看更多的命令</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-help.png" alt="docker-machine-help"></p>
<p>其中的ssh是以ssh方式登录虚拟主机，rm是删除虚拟主机等。</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker-machine-ssh.png" alt="docker-machine-ssh"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins参数化构建maven项目]]></title>
      <url>http://grug.tech/2015/11/17/jenkins-build-maven-with-parameter/</url>
      <content type="html"><![CDATA[<p>本文介绍如何参数化构建jenkins项目。</p>
<p>注：本文是以maven项目为背景。</p>
<h2 id="在Jenkins中安装所需插件"><a href="#在Jenkins中安装所需插件" class="headerlink" title="在Jenkins中安装所需插件"></a>在Jenkins中安装所需插件</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/DynamicParameterPlugin.png" alt="DynamicParameterPlugin"></p>
<a id="more"></a>
<h2 id="新建一个maven项目"><a href="#新建一个maven项目" class="headerlink" title="新建一个maven项目"></a>新建一个maven项目</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/new_maven.png" alt="new_maven"></p>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>这里的项目名称和描述供演示，无意义。</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_cfg_1.png" alt="jenkins_cfg_1"></p>
<h3 id="配置项目svn地址"><a href="#配置项目svn地址" class="headerlink" title="配置项目svn地址"></a>配置项目svn地址</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_cfg_svn.png" alt="jenkins_cfg_svn"></p>
<h3 id="要同时构建其它依赖项目，可以继续添加"><a href="#要同时构建其它依赖项目，可以继续添加" class="headerlink" title="要同时构建其它依赖项目，可以继续添加"></a>要同时构建其它依赖项目，可以继续添加</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_cfg_svn3.png" alt="jenkins_cfg_svn3"></p>
<h3 id="配置前置构建，这里配置的是在构建主项目之前需要构建的依赖项目"><a href="#配置前置构建，这里配置的是在构建主项目之前需要构建的依赖项目" class="headerlink" title="配置前置构建，这里配置的是在构建主项目之前需要构建的依赖项目"></a>配置前置构建，这里配置的是在构建主项目之前需要构建的依赖项目</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_pre_step.png" alt="jenkins_pre_step"></p>
<p>下面的省略</p>
<h3 id="配置核心项目"><a href="#配置核心项目" class="headerlink" title="配置核心项目"></a>配置核心项目</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_build.png" alt="jenkins_build"></p>
<h3 id="配置后置构建"><a href="#配置后置构建" class="headerlink" title="配置后置构建"></a>配置后置构建</h3><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_post_step.png" alt="jenkins_post_step"></p>
<p>这里实现的是在服务器上重启两个dubbo服务。</p>
<p>注：这里需要安装以下插件</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_ssh_plugin.png" alt="jenkins_ssh_plugin"></p>
<p>附：</p>
<p>部署应用并重启tomcat的后置构建，供参考。<span style="color: #ff0000;">与上文无关。</span></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/jenkins_ssh_restart_tomcat.png" alt="jenkins_ssh_restart_tomcat"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jenkins使用sonar插件]]></title>
      <url>http://grug.tech/2015/11/16/jenkins-with-sonar/</url>
      <content type="html"><![CDATA[<p>本文介绍如何在jenkins上使用sonar</p>
<p>关于jenkins和sonar的介绍，请大家google之。</p>
<h1 id="安装sonarqube和sonar-runner"><a href="#安装sonarqube和sonar-runner" class="headerlink" title="安装sonarqube和sonar-runner"></a>安装sonarqube和sonar-runner</h1><p>到<a href="http://www.sonarqube.org/" target="_blank" rel="external">官网</a> 下载sonarqube与sonar-runner.</p>
<p>解压缩到工作目录</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonar_unzip.png" alt="sonar_unzip"><br>配置环境变量<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim .bash_profile</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">export JAVA_HOME=/home/soft/jdk1.7.0_55</div><div class="line">export SONAR_RUNNER_HOME=/home/soft/sonar/sonar-runner-2.4</div><div class="line">export MAVEN_HOME=/home/soft/apache-maven-3.0.4</div><div class="line">PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$SONAR_RUNNER_HOME/bin:$MAVEN_HOME/bin</div><div class="line">export PATH</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="在jenkins中安装sonar-插件"><a href="#在jenkins中安装sonar-插件" class="headerlink" title="在jenkins中安装sonar 插件"></a>在jenkins中安装sonar 插件</h1><p>依次 系统管理&gt; 插件管理&gt;可选插件  安装SonarQube plugin</p>
<p>如下</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonarquble-plugin.png" alt="sonarquble-plugin"></p>
<p>在jenkins的系统管理&gt;系统设置</p>
<p>配置sonar-runner</p>
<p>如下</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonar_runner_cfg.png" alt="sonar_runner_cfg"></p>
<p>配置sonarqube</p>
<p><img src="http://glovee.net/wp-content/uploads/2015/11/sonar_config-1024x460.png" alt="sonar_config"></p>
<h1 id="配置sonarqube并启动"><a href="#配置sonarqube并启动" class="headerlink" title="配置sonarqube并启动"></a>配置sonarqube并启动</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost conf]<span class="comment"># pwd</span></div><div class="line">/home/soft/sonar/sonar-runner-2.4/conf</div><div class="line">[root@localhost conf]<span class="comment"># vim sonar-runner.properties</span></div></pre></td></tr></table></figure>
<p>主要配置sonar数据库相关信息。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#Configure here general information about the environment, such as SonarQube DB details for example</div><div class="line">#No information about specific project should appear here</div><div class="line"></div><div class="line">#----- Default SonarQube server</div><div class="line">sonar.host.url=http://localhost:9000</div><div class="line"></div><div class="line">#----- PostgreSQL</div><div class="line">#sonar.jdbc.url=jdbc:postgresql://localhost/sonar</div><div class="line"></div><div class="line">#----- MySQL</div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;amp;amp;characterEncoding=utf8</div><div class="line"></div><div class="line">#----- Oracle</div><div class="line">#sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE</div><div class="line"></div><div class="line">#----- Microsoft SQLServer</div><div class="line">#sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor</div><div class="line"></div><div class="line">#----- Global database settings</div><div class="line">sonar.jdbc.username=sonar</div><div class="line">sonar.jdbc.password=sonar</div><div class="line"></div><div class="line">#----- Default source code encoding</div><div class="line">sonar.sourceEncoding=UTF-8</div><div class="line"></div><div class="line">#----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)</div><div class="line">sonar.login=admin</div><div class="line">sonar.password=pwd</div></pre></td></tr></table></figure></p>
<p>启动sonar</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost linux-x86-64]<span class="comment"># pwd</span></div><div class="line">/home/soft/sonar/sonarqube-5.1.1/bin/linux-x86-64</div><div class="line">[root@localhost linux-x86-64]<span class="comment"># ./sonar.sh</span></div></pre></td></tr></table></figure>
<h1 id="在jenkins中使用sonar"><a href="#在jenkins中使用sonar" class="headerlink" title="在jenkins中使用sonar"></a>在jenkins中使用sonar</h1><h2 id="新建一个自由项目"><a href="#新建一个自由项目" class="headerlink" title="新建一个自由项目"></a>新建一个自由项目</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/new_step1.png" alt="new_step1"></p>
<h2 id="配置添加svn代码库信息"><a href="#配置添加svn代码库信息" class="headerlink" title="配置添加svn代码库信息"></a>配置添加svn代码库信息</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonar_config_svn.png" alt="sonar_config_svn"></p>
<h2 id="配置构建sonarqube信息"><a href="#配置构建sonarqube信息" class="headerlink" title="配置构建sonarqube信息"></a>配置构建sonarqube信息</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/invoke_sonar.png" alt="invoke_sonar"><br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/invoke_config.png" alt="invoke_config"><br>除了图中红色显示区域，其它都可以默认。</p>
<p>提供一个示例，供参考<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Root project information</div><div class="line">sonar.projectKey=test #项目key</div><div class="line">sonar.projectName=test-sonar #项目名称</div><div class="line">sonar.projectVersion=1.0 # 版本</div><div class="line"></div><div class="line"># Some properties that will be inherited by the modules</div><div class="line">sonar.sources=src/main/java #要分析的代码</div><div class="line">sonar.exclusions=src/main/java/com/test/* #这个包下的代码不分析</div><div class="line"></div><div class="line">sonar.cpd.exclusions=src/main/java/com/mycom/testcenter/model/**/* #这个包下的代码重复率不计算</div><div class="line"></div><div class="line"># List of the module identifiers</div><div class="line">sonar.modules=test-interface,test-service #两个子模块</div><div class="line"></div><div class="line"># Properties can obviously be overriden for</div><div class="line"># each module - just prefix them with the module ID</div><div class="line">kbd-interface.sonar.projectName=test-interface</div><div class="line">kbd-service.sonar.projectName=test-service</div><div class="line"></div><div class="line">sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure></p>
<h2 id="运行构建"><a href="#运行构建" class="headerlink" title="运行构建"></a>运行构建</h2><p>成功后在面板上点击链接查看</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonar_view.png" alt="sonar_view"></p>
<p>如下</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sonar_main_view.png" alt="sonar_main_view"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker单机应用栈]]></title>
      <url>http://grug.tech/2015/11/12/docker-app-stack/</url>
      <content type="html"><![CDATA[<p>本文以《Docker 容器与容器云》中2.3章节为内容进行练习。</p>
<p>结构图</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/IMG_4846.jpg" alt=""></p>
<p>这个应用栈包含一个代理节点，两个web节点，一个主数据库及两个从数据库。<br><a id="more"></a></p>
<p>其中</p>
<p>HAProxy是负载均衡节点：</p>
<p>Redis是非关系型数据库，由一个主节点，两个从节点构成。</p>
<p>App是应用，这里用Python,基于Django架构设计的访问数据库的web应用。</p>
<p>步骤：</p>
<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker pull index.alauda.cn/library/ubuntu</div><div class="line"></div><div class="line">docker pull index.alauda.cn/library/django</div><div class="line"></div><div class="line">docker pull index.alauda.cn/library/haproxy</div><div class="line"></div><div class="line">docker pull index.alauda.cn/library/redis</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151111143045.png" alt="20151111143045"> <img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151111143022.png" alt="20151111143022"> <img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151111142553.png" alt="20151111142553">  <img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151111142509.png" alt="20151111142509"></p>
<h1 id="容器启动顺序为："><a href="#容器启动顺序为：" class="headerlink" title="容器启动顺序为："></a>容器启动顺序为：</h1><p>redis-master&gt;redis-slave&gt;APP&gt;HAProxy</p>
<h1 id="启动容器节点"><a href="#启动容器节点" class="headerlink" title="启动容器节点"></a>启动容器节点</h1><p><span style="color: #ff0000;">注：如果linux启用了SElinux</span></p>
<p><span style="color: #ff0000;">则所有挂载文件夹需要执行以下操作</span><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">chcon -Rt svirt_sandbox_file_t your_folder</div></pre></td></tr></table></figure></p>
<p><strong>启动redis容器</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name redis-master index.alauda.cn/library/redis /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/redis-master_start.png" alt="redis-master_start"><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name redis-slave1 --link redis-master:master index.alauda.cn/library/redis /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/redis-slave1_start.png" alt="redis-slave1_start"><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name redis-slave2 --link redis-master:master index.alauda.cn/library/redis /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/redis-slave2_start.png" alt="redis-slave2_start"></p>
<p><strong>启动应用</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name APP1 --link redis-master:db -v ~/Projects/Django/App1:/usr/src/app index.alauda.cn/library/django /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/App1_start.png" alt="App1_start"><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name APP2 --link redis-master:db -v ~/Projects/Django/App2:/usr/src/app index.alauda.cn/library/django /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/app2_start.png" alt="app2_start"></p>
<p><strong>启动HAProxy</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run -it --name HAProxy --link APP1:APP1 --link APP2:APP2 -p 6301:6301 -v ~/Projects/HAProxy:/tmp index.alauda.cn/library/haproxy /bin/bash</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/haproxy_start.png" alt="haproxy_start"></p>
<p>查看已经启动的容器</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_ps.png" alt="docker_ps"></p>
<p><span style="color: #ff0000;">注：请开启7个命令客户端</span></p>
<h1 id="容器节点配置"><a href="#容器节点配置" class="headerlink" title="容器节点配置"></a>容器节点配置</h1><h2 id="redis主数据库节点配置"><a href="#redis主数据库节点配置" class="headerlink" title="redis主数据库节点配置"></a>redis主数据库节点配置</h2><p>查看redis-master在本地的挂载目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker inspect --format <span class="string">"&#123;&#123; .Mounts&#125;&#125;"</span> redis-master</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/redis-master-mounts2.png" alt="redis-master-mounts2"></p>
<p>修改redis.conf模板文件如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">daemonize yes</div></pre></td></tr></table></figure></p>
<p>然后<span style="color: #ff0000;">在redis-master容器中</span>拷贝/data下redis.conf到执行工作目录，启动redis服务器。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#在容器中</span></div><div class="line">cp /data/redis.conf .</div><div class="line"></div><div class="line">redis-server redis.conf</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/run_redis_master.png" alt="run_redis_master"></p>
<h2 id="redis从数据库节点配置"><a href="#redis从数据库节点配置" class="headerlink" title="redis从数据库节点配置"></a>redis从数据库节点配置</h2><p>与上文类似，<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker inspect --format <span class="string">"&#123;&#123; .Mounts&#125;&#125;"</span> redis-slave1</div><div class="line"></div><div class="line">[&#123;7308e07b7e83737348ebf0e8a7b65bf637bb160d391bca5eb81f9b9c081e96ec /var/lib/docker/volumes/7308e07b7e83737348ebf0e8a7b65bf637bb160d391bca5eb81f9b9c081e96ec/_data /data <span class="built_in">local</span> <span class="literal">true</span>&#125;]</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/7308e07b7e83737348ebf0e8a7b65bf637bb160d391bca5eb81f9b9c081e96ec/_data</div><div class="line"></div><div class="line">cp /home/grug/redis.conf .</div><div class="line"></div><div class="line">vim redis.conf</div></pre></td></tr></table></figure></p>
<p>修改以下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">daemonize yes</div><div class="line">#这里的msater是redis-master的别名</div><div class="line">slaveof master 6397</div></pre></td></tr></table></figure></p>
<p>在<span style="color: #ff0000;">redis-slave1容器</span>中 <span style="color: #000000;">拷贝redis.conf并启动redis-slave1.</span></p>
<p>redis-slave2同理。</p>
<p><strong>测试redis</strong></p>
<p>在redis-master中添加数据</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/query_master.png" alt="query_master"></p>
<p>在redis-slave1和redis-slave2中查询。</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/query_slave1.png" alt="query_slave1"></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/query_slave2.png" alt="query_slave2"></p>
<h2 id="APP容器节点（Django）配置"><a href="#APP容器节点（Django）配置" class="headerlink" title="APP容器节点（Django）配置"></a>APP容器节点（Django）配置</h2><p>在app容器中安装redis支持包<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># pip install redis</span></div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/pip_install_redis.png" alt="pip_install_redis"></p>
<p>测试安装包是否正确<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@88e49470951f:/<span class="comment"># python</span></div><div class="line">Python 3.4.3 (default, Oct 23 2015, 22:19:50)</div><div class="line">[GCC 4.9.2] on linux</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; import redis</div><div class="line">&gt;&gt;&gt; <span class="built_in">print</span>(redis.__file__)</div><div class="line">/usr/<span class="built_in">local</span>/lib/python3.4/site-packages/redis/__init__.py</div></pre></td></tr></table></figure></p>
<p>在<span style="color: #ff0000;">app容器中</span>创建应用<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@eb7b557050fd:/<span class="comment"># cd /usr/src/app/</span></div><div class="line">root@eb7b557050fd:/usr/src/app<span class="comment"># ls</span></div><div class="line">root@eb7b557050fd:/usr/src/app<span class="comment"># mkdir dockerweb</span></div><div class="line">root@eb7b557050fd:/usr/src/app<span class="comment"># ls</span></div><div class="line">dockerweb</div><div class="line">root@eb7b557050fd:/usr/src/app<span class="comment"># cd dockerweb/</span></div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb<span class="comment"># ls</span></div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb<span class="comment"># django-admin.py startproject redisweb</span></div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb<span class="comment"># ls</span></div><div class="line">redisweb</div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb<span class="comment"># cd redisweb/</span></div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># ls</span></div><div class="line">manage.py redisweb</div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py startapp helloworld</span></div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># ls</span></div><div class="line">helloworld manage.py redisweb</div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>在<span style="color: #ff0000;">主机</span>对应的挂载文件夹中修改文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost helloworld]<span class="comment"># pwd</span></div><div class="line">/home/grug/Projects/Django/App1/dockerweb/redisweb/helloworld</div><div class="line">[root@localhost helloworld]<span class="comment"># ls</span></div><div class="line">admin.py __init__.py migrations models.py tests.py views.py</div><div class="line">[root@localhost helloworld]<span class="comment"># vim views.py</span></div></pre></td></tr></table></figure></p>
<p>以下为view.py内容。 <strong><span style="color: #ff0000;">修改或者复制时，请注意缩进，python对缩进敏感。</span></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</div><div class="line"></div><div class="line"><span class="comment"># Create your views here.</span></div><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></div><div class="line">    str=redis.__file__</div><div class="line">    str+=<span class="string">"&amp;lt;br&amp;gt;"</span></div><div class="line">    r = redis.Redis(host=<span class="string">'db'</span>,port=<span class="number">6379</span>,db=<span class="number">0</span>)</div><div class="line">    info = r.info()</div><div class="line">    str+=(<span class="string">"Set Hi &amp;lt;br&amp;gt;"</span>)</div><div class="line">    r.set(<span class="string">'Hi'</span>,<span class="string">'HelloWorld-APP1'</span>)</div><div class="line">    str+=(<span class="string">"Get Hi:%s &amp;lt;br&amp;gt;"</span> % r.get(<span class="string">'Hi'</span>))</div><div class="line">    str+=(<span class="string">"Redis Info:&amp;lt;br&amp;gt;"</span>)</div><div class="line">    str+=(<span class="string">"Key: Info Value"</span>)</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> info:</div><div class="line">        str+=(<span class="string">"%s: %s &amp;lt;br&amp;gt;"</span> % (key,info[key]))</div><div class="line">    <span class="keyword">return</span> HttpResponse(str)</div></pre></td></tr></table></figure>
<p>修改redisweb 项目中的setting.py<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost redisweb]<span class="comment"># ls</span></div><div class="line">__init__.py __pycache__ settings.py urls.py wsgi.py</div><div class="line">[root@localhost redisweb]<span class="comment"># vim settings.py</span></div></pre></td></tr></table></figure></p>
<p>以下为settings.py <span style="color: #ff0000;">要修改</span>的内容<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line"><span class="string">'django.contrib.admin'</span>,</div><div class="line"><span class="string">'django.contrib.auth'</span>,</div><div class="line"><span class="string">'django.contrib.contenttypes'</span>,</div><div class="line"><span class="string">'django.contrib.sessions'</span>,</div><div class="line"><span class="string">'django.contrib.messages'</span>,</div><div class="line"><span class="string">'django.contrib.staticfiles'</span>,</div><div class="line"><span class="string">'helloworld'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost redisweb]<span class="comment"># vim urls.py</span></div></pre></td></tr></table></figure>
<p>以下为urls.py的内容<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> helloworld.views <span class="keyword">import</span> hello</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^helloworld$'</span>,hello),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>在<span style="color: #ff0000;">APP1的容器</span>中执行</p>
<p>目录为/usr/src/app/dockerweb/redisweb<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py makemigrations</span></div><div class="line">No changes detected</div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py migrate</span></div><div class="line">Operations to perform:</div><div class="line">Synchronize unmigrated apps: staticfiles, messages</div><div class="line">Apply all migrations: admin, contenttypes, auth, sessions</div><div class="line">Synchronizing apps without migrations:</div><div class="line">Creating tables...</div><div class="line">Running deferred SQL...</div><div class="line">Installing custom SQL...</div><div class="line">Running migrations:</div><div class="line">Rendering model states... DONE</div><div class="line">Applying contenttypes.0001_initial... OK</div><div class="line">Applying auth.0001_initial... OK</div><div class="line">Applying admin.0001_initial... OK</div><div class="line">Applying contenttypes.0002_remove_content_type_name... OK</div><div class="line">Applying auth.0002_alter_permission_name_max_length... OK</div><div class="line">Applying auth.0003_alter_user_email_max_length... OK</div><div class="line">Applying auth.0004_alter_user_username_opts... OK</div><div class="line">Applying auth.0005_alter_user_last_login_null... OK</div><div class="line">Applying auth.0006_require_contenttypes_0002... OK</div><div class="line">Applying sessions.0001_initial... OK</div><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py syncdb</span></div><div class="line">/usr/<span class="built_in">local</span>/lib/python3.4/site-packages/django/core/management/commands/syncdb.py:24: RemovedInDjango19Warning: The syncdb <span class="built_in">command</span> will be removed <span class="keyword">in</span> Django 1.9</div><div class="line">warnings.warn(<span class="string">"The syncdb command will be removed in Django 1.9"</span>, RemovedInDjango19Warning)</div><div class="line"></div><div class="line">Operations to perform:</div><div class="line">Synchronize unmigrated apps: messages, staticfiles</div><div class="line">Apply all migrations: auth, contenttypes, sessions, admin</div><div class="line">Synchronizing apps without migrations:</div><div class="line">Creating tables...</div><div class="line">Running deferred SQL...</div><div class="line">Installing custom SQL...</div><div class="line">Running migrations:</div><div class="line">No migrations to apply.</div><div class="line"></div><div class="line">You have installed Django<span class="string">'s auth system, and don'</span>t have any superusers defined.</div><div class="line">Would you like to create one now? (yes/no): yes</div><div class="line">Username (leave blank to use <span class="string">'root'</span>): admin</div><div class="line">Email address: grug@glovee.net</div><div class="line">Password:</div><div class="line">Password (again):</div><div class="line">Superuser created successfully.</div></pre></td></tr></table></figure></p>
<p>配置APP2同上，<span style="color: #ff0000;">需要把文件内容的“APP1”替换为“APP2”</span></p>
<p>启动APPweb服务器</p>
<p><span style="color: #ff0000;">在APP1容器</span>中执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@eb7b557050fd:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py runserver 0.0.0.0:8001</span></div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line">November 12, 2015 - 02:31:04</div><div class="line">Django version 1.8.6, using settings <span class="string">'redisweb.settings'</span></div><div class="line">Starting development server at http://0.0.0.0:8001/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure></p>
<p>在APP2<span style="color: #ff0000;">容器中</span>执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@88e49470951f:/usr/src/app/dockerweb/redisweb<span class="comment"># python manage.py runserver 0.0.0.0:8002</span></div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line">November 12, 2015 - 02:34:54</div><div class="line">Django version 1.8.6, using settings <span class="string">'redisweb.settings'</span></div><div class="line">Starting development server at http://0.0.0.0:8002/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure></p>
<p>到这里APP配置完毕。</p>
<h2 id="HAProxy节点配置"><a href="#HAProxy节点配置" class="headerlink" title="HAProxy节点配置"></a>HAProxy节点配置</h2><p>配置HAProxy实现负载均衡。</p>
<p>修改HAProxy在主机上挂载文件夹内的文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[root@localhost HAProxy]<span class="comment"># vim haproxy.cfg</span></div></pre></td></tr></table></figure></p>
<p>以下为haproxy.cfg内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">global</div><div class="line">log 127.0.0.1 local0 #配置日志输出</div><div class="line">maxconn 4096 #最大连接数</div><div class="line">chroot /usr/local/sbin #改变当前工作目录</div><div class="line">daemon #以后台形式运行</div><div class="line">nbproc 4 #启动4个实例</div><div class="line">pidfile /usr/local/sbin/haproxy.pid #pid文件位置</div><div class="line">defaults</div><div class="line">log 127.0.0.1 local3</div><div class="line">mode http #｛tcp|http|health｝设定启动实例协议类型</div><div class="line">option dontlognull #保证HAProxy不记录上级负载均衡发送来用于检测状态没有数据的心跳包</div><div class="line">option redispatch #当serverId对应的服务器挂掉后，强制定向到其它健康的服务器</div><div class="line">retries 2 #重试两次连接失败就认为服务器不可用，主要通过后面的check检查</div><div class="line">maxconn 2000</div><div class="line">balance roundrobin #负载均衡算法，roundrobin表示轮询，source表示按照IP</div><div class="line">timeout connect 5000ms #连接超时时间</div><div class="line">timeout client 50000ms #客户端连接超时时间</div><div class="line">timeout server 50000ms #服务器端连接超时时间</div><div class="line">listen redis_proxy</div><div class="line">bind 0.0.0.0:6301</div><div class="line">stats enable</div><div class="line">stats uri /haproxy-stats</div><div class="line">server APP1 APP1:8001 check inter 2000 rise 2 fall 5</div><div class="line">server APP2 APP2:8002 check inter 2000 rise 2 fall 5</div></pre></td></tr></table></figure></p>
<p>在HAProxy容器中复制文件，启动HAProxy<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@78f14ac2461b:/usr/<span class="built_in">local</span>/sbin<span class="comment"># cp /tmp/haproxy.cfg .</span></div><div class="line">root@78f14ac2461b:/usr/<span class="built_in">local</span>/sbin<span class="comment"># ls</span></div><div class="line">haproxy haproxy-systemd-wrapper haproxy.cfg</div><div class="line">root@78f14ac2461b:/usr/<span class="built_in">local</span>/sbin<span class="comment"># haproxy -f haproxy.cfg</span></div><div class="line">[WARNING] 315/032723 (12) : Proxy <span class="string">'redis_proxy'</span>: <span class="keyword">in</span> multi-process mode, stats will be limited to process assigned to the current request.</div></pre></td></tr></table></figure></p>
<p>本地访问</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/app1-view.png" alt="app1-view"></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/app2_view.png" alt="app2_view"></p>
<p>附件列表</p>
<p>redis-slave的配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</div><div class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</div><div class="line">#Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程（守护进程（daemon）是指在UNIX或其他多任务操作系统中在后台执行的电脑程序，并不会接受电脑用户的直接操控。）</div><div class="line">daemonize yes</div><div class="line"></div><div class="line"># When running daemonized, Redis writes a pid file in /var/run/redis.pid by</div><div class="line"># default. You can specify a custom pid file location here.</div><div class="line">#当 Redis 以守护进程的方式运行的时候,Redis 默认会把 pid 文件放在/var/run/redis.pid,你可以配置到其他地址。当运行多个 redis 服务时,需要指定不同的 pid 文件和端口</div><div class="line">pidfile /var/run/redis.pid</div><div class="line"></div><div class="line"># Accept connections on the specified port, default is 6379.</div><div class="line"># If port 0 is specified Redis will not listen on a TCP socket.</div><div class="line">#端口没什么好说的</div><div class="line">port 6379</div><div class="line"></div><div class="line"># If you want you can bind a single interface, if the bind option is not</div><div class="line"># specified all the interfaces will listen for incoming connections.</div><div class="line">#指定Redis可接收请求的IP地址,不设置将处理所有请求,建议生产环境中设置</div><div class="line"># bind 127.0.0.1</div><div class="line"></div><div class="line"># Close the connection after a client is idle for N seconds (0 to disable)</div><div class="line">#客户端连接的超时时间,单位为秒,超时后会关闭连接</div><div class="line">timeout 0</div><div class="line"></div><div class="line"># Specify the log file name. Also &apos;stdout&apos; can be used to force</div><div class="line"># Redis to log on the standard output. Note that if you use standard</div><div class="line"># output for logging but daemonize, logs will be sent to /dev/null</div><div class="line">#配置 log 文件地址,默认打印在命令行终端的窗口上</div><div class="line">logfile stdout</div><div class="line"></div><div class="line"># Set the number of databases. The default database is DB 0, you can select</div><div class="line"># a different one on a per-connection basis using SELECT &amp;lt;dbid&amp;gt; where</div><div class="line"># dbid is a number between 0 and &apos;databases&apos;-1</div><div class="line">#设置数据库的个数,可以使用 SELECT &amp;lt;dbid&amp;gt;命令来切换数据库。默认使用的数据库是 0</div><div class="line">databases 16</div><div class="line"></div><div class="line">#</div><div class="line"># Save the DB on disk:</div><div class="line">#</div><div class="line"># save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;</div><div class="line">#</div><div class="line"># Will save the DB if both the given number of seconds and the given</div><div class="line"># number of write operations against the DB occurred.</div><div class="line">#</div><div class="line"># In the example below the behaviour will be to save:</div><div class="line"># after 900 sec (15 min) if at least 1 key changed</div><div class="line"># after 300 sec (5 min) if at least 10 keys changed</div><div class="line"># after 60 sec if at least 10000 keys changed</div><div class="line">#</div><div class="line"># Note: you can disable saving at all commenting all the &quot;save&quot; lines.</div><div class="line">#设置 Redis 进行数据库镜像的频率。</div><div class="line">#900秒之内有1个keys发生变化时</div><div class="line">#30秒之内有10个keys发生变化时</div><div class="line">#60秒之内有10000个keys发生变化时</div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"></div><div class="line"># Compress string objects using LZF when dump .rdb databases?</div><div class="line"># For default that&apos;s set to &apos;yes&apos; as it&apos;s almost always a win.</div><div class="line"># If you want to save some CPU in the saving child set it to &apos;no&apos; but</div><div class="line"># the dataset will likely be bigger if you have compressible values or keys.</div><div class="line">#在进行镜像备份时,是否进行压缩</div><div class="line">rdbcompression yes</div><div class="line"></div><div class="line"># The filename where to dump the DB</div><div class="line">#镜像备份文件的文件名</div><div class="line">dbfilename dump.rdb</div><div class="line"></div><div class="line"># The working directory.</div><div class="line">#</div><div class="line"># The DB will be written inside this directory, with the filename specified</div><div class="line"># above using the &apos;dbfilename&apos; configuration directive.</div><div class="line">#</div><div class="line"># Also the Append Only File will be created inside this directory.</div><div class="line">#</div><div class="line"># Note that you must specify a directory here, not a file name.</div><div class="line">#数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为 Redis 在进行备份时,先会将当前数据库的状态写入到一个临时文件中,等备份完成时,再把该该临时文件替换为上面所指定的文件,</div><div class="line">#而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中</div><div class="line">dir ./</div><div class="line"></div><div class="line"># Master-Slave replication. Use slaveof to make a Redis instance a copy of</div><div class="line"># another Redis server. Note that the configuration is local to the slave</div><div class="line"># so for example it is possible to configure the slave to save the DB with a</div><div class="line"># different interval, or to listen to another port, and so on.</div><div class="line">#设置该数据库为其他数据库的从数据库</div><div class="line"># slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;</div><div class="line">slaveof master 6379</div><div class="line"># If the master is password protected (using the &quot;requirepass&quot; configuration</div><div class="line"># directive below) it is possible to tell the slave to authenticate before</div><div class="line"># starting the replication synchronization process, otherwise the master will</div><div class="line"># refuse the slave request.</div><div class="line">#指定与主数据库连接时需要的密码验证</div><div class="line"># masterauth &amp;lt;master-password&amp;gt;</div><div class="line"></div><div class="line"># Require clients to issue AUTH &amp;lt;PASSWORD&amp;gt; before processing any other</div><div class="line"># commands. This might be useful in environments in which you do not trust</div><div class="line"># others with access to the host running redis-server.</div><div class="line">#</div><div class="line"># This should stay commented out for backward compatibility and because most</div><div class="line"># people do not need auth (e.g. they run their own servers).</div><div class="line">#</div><div class="line"># Warning: since Redis is pretty fast an outside user can try up to</div><div class="line"># 150k passwords per second against a good box. This means that you should</div><div class="line"># use a very strong password otherwise it will be very easy to break.</div><div class="line">#设置客户端连接后进行任何其他指定前需要使用的密码。</div><div class="line">#警告:redis速度相当快,一个外部的用户可以在一秒钟进行150K次的密码尝试,你需要指定非常非常强大的密码来防止暴力破解。</div><div class="line"></div><div class="line"># requirepass foobared</div><div class="line"># Set the max number of connected clients at the same time. By default there</div><div class="line"># is no limit, and it&apos;s up to the number of file descriptors the Redis process</div><div class="line"># is able to open. The special value &apos;0&apos; means no limits.</div><div class="line"># Once the limit is reached Redis will close all the new connections sending</div><div class="line"># an error &apos;max number of clients reached&apos;.</div><div class="line">#限制同时连接的客户数量。当连接数超过这个值时,redis 将不再接收其他连接请求,客户端尝试连接时将收到 error 信息</div><div class="line"># maxclients 128</div><div class="line"></div><div class="line"># Don&apos;t use more memory than the specified amount of bytes.</div><div class="line"># When the memory limit is reached Redis will try to remove keys</div><div class="line"># accordingly to the eviction policy selected (see maxmemmory-policy).</div><div class="line">#</div><div class="line"># If Redis can&apos;t remove keys according to the policy, or if the policy is</div><div class="line"># set to &apos;noeviction&apos;, Redis will start to reply with errors to commands</div><div class="line"># that would use more memory, like SET, LPUSH, and so on, and will continue</div><div class="line"># to reply to read-only commands like GET.</div><div class="line">#</div><div class="line"># This option is usually useful when using Redis as an LRU cache, or to set</div><div class="line"># an hard memory limit for an instance (using the &apos;noeviction&apos; policy).</div><div class="line">#</div><div class="line"># WARNING: If you have slaves attached to an instance with maxmemory on,</div><div class="line"># the size of the output buffers needed to feed the slaves are subtracted</div><div class="line"># from the used memory count, so that network problems / resyncs will</div><div class="line"># not trigger a loop where keys are evicted, and in turn the output</div><div class="line"># buffer of slaves is full with DELs of keys evicted triggering the deletion</div><div class="line"># of more keys, and so forth until the database is completely emptied.</div><div class="line">#</div><div class="line"># In short… if you have slaves attached it is suggested that you set a lower</div><div class="line"># limit for maxmemory so that there is some free RAM on the system for slave</div><div class="line"># output buffers (but this is not needed if the policy is &apos;noeviction&apos;).</div><div class="line">#设置redis能够使用的最大内存。当内存满了的时候,如果还接收到set命令,redis将先尝试剔除设置过expire信息的key,而不管该key的过期时间还没有到达。</div><div class="line">#在删除时,将按照过期时间进行删除,最早将要被过期的key将最先被删除。如果带有expire信息的key都删光了,那么将返回错误。</div><div class="line">#这样,redis将不再接收写请求,只接收get请求。maxmemory的设置比较适合于把redis当作于类似memcached 的缓存来使用</div><div class="line"># maxmemory &amp;lt;bytes&amp;gt;</div><div class="line"></div><div class="line"># By default Redis asynchronously dumps the dataset on disk. If you can live</div><div class="line"># with the idea that the latest records will be lost if something like a crash</div><div class="line"># happens this is the preferred way to run Redis. If instead you care a lot</div><div class="line"># about your data and don&apos;t want to that a single record can get lost you should</div><div class="line"># enable the append only mode: when this mode is enabled Redis will append</div><div class="line"># every write operation received in the file appendonly.aof. This file will</div><div class="line"># be read on startup in order to rebuild the full dataset in memory.</div><div class="line">#</div><div class="line"># Note that you can have both the async dumps and the append only file if you</div><div class="line"># like (you have to comment the &quot;save&quot; statements above to disable the dumps).</div><div class="line"># Still if append only mode is enabled Redis will load the data from the</div><div class="line"># log file at startup ignoring the dump.rdb file.</div><div class="line">#</div><div class="line"># IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</div><div class="line"># log file in background when it gets too big.</div><div class="line">#默认情况下,redis 会在后台异步的把数据库镜像备份到磁盘,但是该备份是非常耗时的,而且备份也不能很频繁,如果发生诸如拉闸限电、拔插头等状况,那么将造成比较大范围的数据丢失。</div><div class="line">#所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。</div><div class="line">#开 启append only 模式之后,redis 会把所接收到的每一次写操作请求都追加到appendonly.aof 文件中,当redis重新启动时,会从该文件恢复出之前的状态。</div><div class="line">#但是这样会造成 appendonly.aof 文件过大,所以redis还支持了BGREWRITEAOF 指令,对appendonly.aof进行重新整理</div><div class="line">appendonly no</div><div class="line"></div><div class="line"># The fsync() call tells the Operating System to actually write data on disk</div><div class="line"># instead to wait for more data in the output buffer. Some OS will really flush</div><div class="line"># data on disk, some other OS will just try to do it ASAP.</div><div class="line">#</div><div class="line"># Redis supports three different modes:</div><div class="line">#</div><div class="line"># no: don&apos;t fsync, just let the OS flush the data when it wants. Faster.</div><div class="line"># always: fsync after every write to the append only log . Slow, Safest.</div><div class="line"># everysec: fsync only if one second passed since the last fsync. Compromise.</div><div class="line">#</div><div class="line"># The default is &quot;everysec&quot; that&apos;s usually the right compromise between</div><div class="line"># speed and data safety. It&apos;s up to you to understand if you can relax this to</div><div class="line"># &quot;no&quot; that will will let the operating system flush the output buffer when</div><div class="line"># it wants, for better performances (but if you can live with the idea of</div><div class="line"># some data loss consider the default persistence mode that&apos;s snapshotting),</div><div class="line"># or on the contrary, use &quot;always&quot; that&apos;s very slow but a bit safer than</div><div class="line"># everysec.</div><div class="line">#</div><div class="line"># If unsure, use &quot;everysec&quot;.</div><div class="line">#设置对 appendonly.aof 文件进行同步的频率。always 表示每次有写操作都进行同步,everysec 表示对写操作进行累积,每秒同步一次。</div><div class="line"># appendfsync always</div><div class="line">appendfsync everysec</div><div class="line"># appendfsync no</div><div class="line"></div><div class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</div><div class="line"># amount of RAM needed to hold the whole dataset in memory.</div><div class="line"># In order to do so very used keys are taken in memory while the other keys</div><div class="line"># are swapped into a swap file, similarly to what operating systems do</div><div class="line"># with memory pages.</div><div class="line">#</div><div class="line"># To enable VM just set &apos;vm-enabled&apos; to yes, and set the following three</div><div class="line"># VM parameters accordingly to your needs.</div><div class="line">#是否开启虚拟内存支持。因为 redis 是一个内存数据库,而且当内存满的时候,无法接收新的写请求,所以在redis2.0中,提供了虚拟内存的支持。</div><div class="line">#但是需要注意的是,redis中,所有的key都会放在内存中,在内存不够时,只会把value 值放入交换区。</div><div class="line">#这样保证了虽然使用虚拟内存,但性能基本不受影响,同时,你需要注意的是你要把vm-max-memory设置到足够来放下你的所有的key</div><div class="line">#vm-enabled no</div><div class="line"># vm-enabled yes</div><div class="line"></div><div class="line"># This is the path of the Redis swap file. As you can guess, swap files</div><div class="line"># can&apos;t be shared by different Redis instances, so make sure to use a swap</div><div class="line"># file for every redis process you are running. Redis will complain if the</div><div class="line"># swap file is already in use.</div><div class="line">#</div><div class="line"># The best kind of storage for the Redis swap file (that&apos;s accessed at random)</div><div class="line"># is a Solid State Disk (SSD).</div><div class="line">#</div><div class="line"># *** WARNING *** if you are using a shared hosting the default of putting</div><div class="line"># the swap file under /tmp is not secure. Create a dir with access granted</div><div class="line"># only to Redis user and configure Redis to create the swap file there.</div><div class="line">#设置虚拟内存的交换文件路径</div><div class="line">#vm-swap-file /tmp/redis.swap</div><div class="line"></div><div class="line"># vm-max-memory configures the VM to use at max the specified amount of</div><div class="line"># RAM. Everything that deos not fit will be swapped on disk *if* possible, that</div><div class="line"># is, if there is still enough contiguous space in the swap file.</div><div class="line">#</div><div class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</div><div class="line"># default, just specify the max amount of RAM you can in bytes, but it&apos;s</div><div class="line"># better to leave some margin. For instance specify an amount of RAM</div><div class="line"># that&apos;s more or less between 60 and 80% of your free RAM.</div><div class="line">#这里设置开启虚拟内存之后,redis将使用的最大物理内存的大小。默认为0,redis将把他所有的能放到交换文件的都放到交换文件中,以尽量少的使用物理内存。</div><div class="line">#在生产环境下,需要根据实际情况设置该值,最好不要使用默认的 0</div><div class="line">#vm-max-memory 0</div><div class="line"></div><div class="line"># Redis swap files is split into pages. An object can be saved using multiple</div><div class="line"># contiguous pages, but pages can&apos;t be shared between different objects.</div><div class="line"># So if your page is too big, small objects swapped out on disk will waste</div><div class="line"># a lot of space. If you page is too small, there is less space in the swap</div><div class="line"># file (assuming you configured the same number of total swap file pages).</div><div class="line">#</div><div class="line"># If you use a lot of small objects, use a page size of 64 or 32 bytes.</div><div class="line"># If you use a lot of big objects, use a bigger page size.</div><div class="line"># If unsure, use the default</div><div class="line">#设置虚拟内存的页大小,如果你的 value 值比较大,比如说你要在 value 中放置博客、新闻之类的所有文章内容,就设大一点,如果要放置的都是很小的内容,那就设小一点</div><div class="line">#vm-page-size 32</div><div class="line"></div><div class="line"># Number of total memory pages in the swap file.</div><div class="line"># Given that the page table (a bitmap of free/used pages) is taken in memory,</div><div class="line"># every 8 pages on disk will consume 1 byte of RAM.</div><div class="line">#</div><div class="line"># The total swap size is vm-page-size * vm-pages</div><div class="line">#</div><div class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</div><div class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</div><div class="line">#</div><div class="line"># It&apos;s better to use the smallest acceptable value for your application,</div><div class="line"># but the default is large in order to work in most conditions.</div><div class="line">#设置交换文件的总的 page 数量,需要注意的是,page table信息会放在物理内存中,每8个page 就会占据RAM中的 1 个 byte。</div><div class="line">#总的虚拟内存大小 = vm-page-size * vm-pages</div><div class="line">#vm-pages 134217728</div><div class="line"></div><div class="line"># Max number of VM I/O threads running at the same time.</div><div class="line"># This threads are used to read/write data from/to swap file, since they</div><div class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</div><div class="line"># number of threads can help with big objects even if they can&apos;t help with</div><div class="line"># I/O itself as the physical device may not be able to couple with many</div><div class="line"># reads/writes operations at the same time.</div><div class="line">#</div><div class="line"># The special value of 0 turn off threaded I/O and enables the blocking</div><div class="line"># Virtual Memory implementation.</div><div class="line">#设置 VM IO 同时使用的线程数量。</div><div class="line">#vm-max-threads 4</div><div class="line"></div><div class="line"># Hashes are encoded in a special way (much more memory efficient) when they</div><div class="line"># have at max a given numer of elements, and the biggest element does not</div><div class="line"># exceed a given threshold. You can configure this limits with the following</div><div class="line"># configuration directives.</div><div class="line">#redis 2.0 中引入了 hash 数据结构。</div><div class="line">#hash 中包含超过指定元素个数并且最大的元素当没有超过临界时,hash 将以zipmap(又称为 small hash大大减少内存使用)来存储,这里可以设置这两个临界值</div><div class="line">#hash-max-zipmap-entries 512</div><div class="line">#hash-max-zipmap-value 64</div><div class="line"></div><div class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</div><div class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</div><div class="line"># keys to values). The hash table implementation redis uses (see dict.c)</div><div class="line"># performs a lazy rehashing: the more operation you run into an hash table</div><div class="line"># that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</div><div class="line"># server is idle the rehashing is never complete and some more memory is used</div><div class="line"># by the hash table.</div><div class="line">#</div><div class="line"># The default is to use this millisecond 10 times every second in order to</div><div class="line"># active rehashing the main dictionaries, freeing memory when possible.</div><div class="line">#</div><div class="line"># If unsure:</div><div class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</div><div class="line"># not a good thing in your environment that Redis can reply form time to time</div><div class="line"># to queries with 2 milliseconds delay.</div><div class="line">#</div><div class="line"># use &quot;activerehashing yes&quot; if you don&apos;t have such hard requirements but</div><div class="line"># want to free memory asap when possible.</div><div class="line">#开启之后,redis 将在每 100 毫秒时使用 1 毫秒的 CPU 时间来对 redis 的 hash 表进行重新 hash,可以降低内存的使用。</div><div class="line">#当你的使用场景中,有非常严格的实时性需要,不能够接受 Redis 时不时的对请求有 2 毫秒的延迟的话,把这项配置为 no。</div><div class="line">#如果没有这么严格的实时性要求,可以设置为 yes,以便能够尽可能快的释放内存</div><div class="line">activerehashing yes</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker 安装mysql]]></title>
      <url>http://grug.tech/2015/11/09/docker-install-mysql/</url>
      <content type="html"><![CDATA[<h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker pull index.alauda.cn/library/mysql</div></pre></td></tr></table></figure>
<h2 id="第一种方式启动"><a href="#第一种方式启动" class="headerlink" title="第一种方式启动"></a>第一种方式启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run --name mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=mysql <span class="_">-d</span> -p 3306:3306 index.alauda.cn/library/mysql</div></pre></td></tr></table></figure>
<p>其中：–name指定容器名称<br><a id="more"></a></p>
<p>-e环境变量MYSQL_ROOT_PASSWORD指定mysql root用户的密码</p>
<p>-p指定本地端口3306映射到容器端口3306</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151109140125.png" alt="20151109140125"><br>可以通过客户端连接mysql  localhost:3306  user root  pwd mysql</p>
<h2 id="第二种方式（挂载指定文件夹存储mysql文件）"><a href="#第二种方式（挂载指定文件夹存储mysql文件）" class="headerlink" title="第二种方式（挂载指定文件夹存储mysql文件）"></a>第二种方式（挂载指定文件夹存储mysql文件）</h2><p>由于第一种方式启动的容器，相关的mysql数据库文件在容器内部，不容易定位，可以使用下面的方法挂载指定的文件来存储。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run --name new-mysql -v /home/grug/newmysql_data:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=mysql <span class="_">-d</span> -p 3306:3306 index.alauda.cn/library/mysql</div></pre></td></tr></table></figure></p>
<p>其中：-v 表示挂载 “/home/grug/newmysql_data”文件到容器内部，来映射容器的“/var/lib/mysql”文件。</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/my.png" alt="my"></p>
<p><span style="color: #ff0000;">注意:要保证挂载的文件夹存在。若linux中有SElinux服务，则需要下面的操作，否则会启动失败</span>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">chcon -Rt svirt_sandbox_file_t /home/grug/newmysql_data</div></pre></td></tr></table></figure>
<p>把上面的文件夹换成自己定义的文件夹。</p>
<h2 id="第一种方式可以通过"><a href="#第一种方式可以通过" class="headerlink" title="第一种方式可以通过"></a>第一种方式可以通过</h2><pre><code class="bash">docker inspect mysql
</code></pre>
<p>定位mysql存储位置</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151109141236.png" alt="20151109141236"></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151109141339.png" alt="20151109141339"></p>
<p>这样就定位到了mysql存放文件的真正位置。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker安装wordpress]]></title>
      <url>http://grug.tech/2015/11/09/docker-install-wordpress/</url>
      <content type="html"><![CDATA[<p>安装启动docker不再赘述，</p>
<p>以下是两个步骤</p>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker pull index.alauda.cn/alauda/wordpress</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run --name wordpress <span class="_">-d</span> -p 80:80 index.alauda.cn/alauda/wordpress</div></pre></td></tr></table></figure>
<p>直接访问：<a href="http://localhost" target="_blank" rel="external">http://localhost</a></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/20151109114328-300x172.png" alt="20151109114328"></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/step1.png" alt="step1"></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/edit.png" alt="edit"></p>
<p>ps.由于镜像已经包含了mysql数据库，所以不需要单独启动数据库。</p>
<p>就是这么简单，wordpress就安装好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker-运行一个tomcat容器]]></title>
      <url>http://grug.tech/2015/11/03/docker-install-tomcat/</url>
      <content type="html"><![CDATA[<p>windows 请先参照这里安装;</p>
<p><a href="http://docs.docker.com/windows/step_one/" target="_blank" rel="external">windows安装</a></p>
<p>以下为正文</p>
<h1 id="可以选择在docker-hub上搜索tomcat"><a href="#可以选择在docker-hub上搜索tomcat" class="headerlink" title="可以选择在docker hub上搜索tomcat"></a>可以选择在docker hub上搜索tomcat</h1><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/tomcat.png" alt="tomcat"></p>
<a id="more"></a>
<p>由于连接国外的网站速度较慢，推荐</p>
<p><a href="https://hub.alauda.cn" target="_blank" rel="external">hub.alauda.cn</a>,搜索“tomcat”</p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/tomcat2.png" alt="tomcat2"></p>
<h1 id="在Linux上启动docker"><a href="#在Linux上启动docker" class="headerlink" title="在Linux上启动docker"></a>在Linux上启动docker</h1><p>方式1：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo service docker start</div></pre></td></tr></table></figure></p>
<p>方式2：<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo systemctl start docker.service</div></pre></td></tr></table></figure></p>
<h1 id="把当前登录用户加入dokcer组，这样可以不用每次都输入”sudo”"><a href="#把当前登录用户加入dokcer组，这样可以不用每次都输入”sudo”" class="headerlink" title="把当前登录用户加入dokcer组，这样可以不用每次都输入”sudo”"></a>把当前登录用户加入dokcer组，这样可以不用每次都输入”sudo”</h1><p>新建用户组docker:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo groupadd docker</div></pre></td></tr></table></figure></p>
<p>添加用户glovee到docker组中。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo gpasswd <span class="_">-a</span> glovee docker</div></pre></td></tr></table></figure></p>
<h1 id="查看当前docker所有镜像。"><a href="#查看当前docker所有镜像。" class="headerlink" title="查看当前docker所有镜像。"></a>查看当前docker所有镜像。</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">dock ps</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/images.png" alt="images"></p>
<h1 id="下载，启动tomcat"><a href="#下载，启动tomcat" class="headerlink" title="下载，启动tomcat"></a>下载，启动tomcat</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker run --name tomcat <span class="_">-d</span> -p 8080:8080 <span class="_">-e</span> TOMCAT_PASS=<span class="string">"mypwd"</span> index.alauda.cn/alauda/tomcat:latest</div></pre></td></tr></table></figure>
<p>其中的TOMCAT_PASS是tomat密码。<br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/run.png" alt="run"></p>
<h1 id="查看当前运行的容器"><a href="#查看当前运行的容器" class="headerlink" title="查看当前运行的容器"></a>查看当前运行的容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/ps-1024x52.png" alt="ps"></p>
<h1 id="查看当前端口占用"><a href="#查看当前端口占用" class="headerlink" title="查看当前端口占用"></a>查看当前端口占用</h1><p><img src="http://glovee.net/wp-content/uploads/2015/10/netstat.png" alt="netstat"></p>
<h1 id="访问tomcat"><a href="#访问tomcat" class="headerlink" title="访问tomcat"></a>访问tomcat</h1><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/tomcat8.0.21-1024x701.png" alt="tomcat8.0.21"></p>
<h1 id="停止tomcat"><a href="#停止tomcat" class="headerlink" title="停止tomcat"></a>停止tomcat</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">docker stop &#123;CONTAINER ID&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从Dockfile创建一个镜像]]></title>
      <url>http://grug.tech/2015/10/27/create-docker-container-from-dockerfile/</url>
      <content type="html"><![CDATA[<p>本文主要介绍从Dockerfile创建一个centos7镜像</p>
<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo yum install docker</div></pre></td></tr></table></figure>
<p>添加当前用户到docker组中，可以省去每次输入sudo<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$sudo</span> usermod <span class="_">-a</span> -G docker <span class="variable">$USER</span></div></pre></td></tr></table></figure></p>
<p>#下载相关文件<br><a id="more"></a></p>
<p>访问<a href="https://github.com/CentOS/sig-cloud-instance-images/tree/281559d6864e84fe365ef4007d4db27c197b50fb" target="_blank" rel="external">git_bub_centos</a></p>
<p>下载zip,解压缩<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$wget</span> https://codeload.github.com/CentOS/sig-cloud-instance-images/zip/281559d6864e84fe365ef4007d4db27c197b50fb</div></pre></td></tr></table></figure></p>
<p>重新命名centos7</p>
<h1 id="编辑Dockerfile"><a href="#编辑Dockerfile" class="headerlink" title="编辑Dockerfile"></a>编辑Dockerfile</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$vim</span> Dockerfile</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">FROM scratch</div><div class="line">MAINTAINER The CentOS Project &amp;lt;cloud-ops@centos.org&amp;gt;</div><div class="line">ADD c7-docker.tar.xz /</div><div class="line">LABEL Vendor=&quot;CentOS&quot;</div><div class="line">LABEL License=GPLv2</div><div class="line">VOLUME [&quot;/run&quot;, &quot;/tmp&quot;]</div><div class="line">ENV container=docker</div><div class="line">RUN yum install -y openssh-server sudo</div><div class="line">RUN sed -i &apos;s/UsePAM yes/UsePAM no/g&apos; /etc/ssh/sshd_config</div><div class="line">RUN useradd admin</div><div class="line">RUN echo &quot;admin:admin&quot; | chpasswd</div><div class="line">RUN echo &quot;admin ALL=(ALL) ALL&quot; &amp;gt;&amp;gt; /etc/sudoers</div><div class="line">RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</div><div class="line">RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</div><div class="line">RUN mkdir /var/run/sshd</div><div class="line">EXPOSE 22</div><div class="line">CMD [&quot;/usr/sbin/sshd&quot;, &quot;-D&quot;]</div></pre></td></tr></table></figure>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker build -t centos7<span class="built_in">test</span>  . (这里的“.”表示当前目录)</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build1.png" alt="docker_build1"><br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build2.png" alt="docker_build1"><br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build3.png" alt="docker_build1"><br><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build4.png" alt="docker_build1"></p>
<h1 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ docker images</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build5.png" alt="docker_build1"></p>
<h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$docker</span> run <span class="_">-d</span> -p 22 centos7<span class="built_in">test</span></div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build_centos.png" alt="docker_build1"><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="variable">$docker</span> ps</div></pre></td></tr></table></figure></p>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build_centos1.png" alt="docker_build1"></p>
<p>其中的centos7test的容器中的22端口映射主机的32768端口</p>
<h1 id="用ssh登录启动的容器"><a href="#用ssh登录启动的容器" class="headerlink" title="用ssh登录启动的容器"></a>用ssh登录启动的容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ssh admin@localhost -p 32768</div></pre></td></tr></table></figure>
<p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/docker_build_centos2.png" alt="docker_build1"></p>
<p>红色表示已经成功登录到容器</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos7搭建svn服务器]]></title>
      <url>http://grug.tech/2015/10/27/create-svnserver-in-centos7/</url>
      <content type="html"><![CDATA[<h1 id="安装subversion"><a href="#安装subversion" class="headerlink" title="安装subversion"></a>安装subversion</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># yum install subversion</span></div></pre></td></tr></table></figure>
<h1 id="新建版本库文件目录"><a href="#新建版本库文件目录" class="headerlink" title="新建版本库文件目录"></a>新建版本库文件目录</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># mkdir /var/svn/rep</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="新建版本库配置文件"><a href="#新建版本库配置文件" class="headerlink" title="新建版本库配置文件"></a>新建版本库配置文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># svnadmin create /var/svn/repo/</span></div></pre></td></tr></table></figure>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /var/svn/repo/conf/authz</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[aliases]</div><div class="line"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</div><div class="line"></div><div class="line">[groups]</div><div class="line"># harry_and_sally = harry,sally</div><div class="line"># harry_sally_and_joe = harry,sally,&amp;amp;joe</div><div class="line">admin=admin   #前面是组名，后面是组的成员</div><div class="line"># [/foo/bar]</div><div class="line"># harry = rw</div><div class="line"># &amp;amp;joe = r</div><div class="line"># * =</div><div class="line"></div><div class="line"># [repository:/baz/fuz]</div><div class="line"># @harry_and_sally = rw</div><div class="line"># * = r</div><div class="line"></div><div class="line">#这里一般写&quot;/&quot;是repo的根目录。</div><div class="line">[/]</div><div class="line">@admin=rw #组有读写的权限</div><div class="line">*=</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /var/svn/repo/conf/passwd</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[users]</div><div class="line"># harry = harryssecret</div><div class="line"># sally = sallyssecret</div><div class="line">admin=admin #用户名=密码</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim /var/svn/repo/conf/svnserve.conf</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[general]</div><div class="line">### The anon-access and auth-access options control access to the</div><div class="line">### repository for unauthenticated (a.k.a. anonymous) users and</div><div class="line">### authenticated users, respectively.</div><div class="line">### Valid values are &quot;write&quot;, &quot;read&quot;, and &quot;none&quot;.</div><div class="line">### Setting the value to &quot;none&quot; prohibits both reading and writing;</div><div class="line">### &quot;read&quot; allows read-only access, and &quot;write&quot; allows complete</div><div class="line">### read/write access to the repository.</div><div class="line">### The sample settings below are the defaults and specify that anonymous</div><div class="line">### users have read-only access to the repository, while authenticated</div><div class="line">### users have read and write access to the repository.</div><div class="line">anon-access = none #匿名用户不能查看</div><div class="line">auth-access = write#授权用户可以读写</div><div class="line">### The password-db option controls the location of the password</div><div class="line">### database file. Unless you specify a path starting with a /,</div><div class="line">### the file&apos;s location is relative to the directory containing</div><div class="line">### this configuration file.</div><div class="line">### If SASL is enabled (see below), this file will NOT be used.</div><div class="line">### Uncomment the line below to use the default password file.</div><div class="line">password-db = passwd#用户认证文件</div><div class="line">### The authz-db option controls the location of the authorization</div><div class="line">### rules for path-based access control. Unless you specify a path</div><div class="line">### starting with a /, the file&apos;s location is relative to the the</div><div class="line">### directory containing this file. If you don&apos;t specify an</div><div class="line">### authz-db, no path-based access control is done.</div><div class="line">### Uncomment the line below to use the default authorization file.</div><div class="line">authz-db = authz#授权文件</div><div class="line">### This option specifies the authentication realm of the repository.</div><div class="line">### If two repositories have the same authentication realm, they should</div><div class="line">### have the same password database, and vice versa. The default realm</div><div class="line">### is repository&apos;s uuid.</div><div class="line">realm = /var/svn/repo#版本库</div><div class="line">### The force-username-case option causes svnserve to case-normalize</div><div class="line">### usernames before comparing them against the authorization rules in the</div><div class="line">### authz-db file configured above. Valid values are &quot;upper&quot; (to upper-</div><div class="line">### case the usernames), &quot;lower&quot; (to lowercase the usernames), and</div><div class="line">### &quot;none&quot; (to compare usernames as-is without case conversion, which</div><div class="line">### is the default behavior).</div><div class="line"># force-username-case = none</div></pre></td></tr></table></figure>
<h1 id="启动版本库"><a href="#启动版本库" class="headerlink" title="启动版本库"></a>启动版本库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># svnserve -d -r /var/svn/</span></div></pre></td></tr></table></figure>
<h1 id="访问版本库"><a href="#访问版本库" class="headerlink" title="访问版本库"></a>访问版本库</h1><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/svntest.png" alt="svntest"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos7搭建邮件服务器]]></title>
      <url>http://grug.tech/2015/10/27/create-mailserver-in-centos7/</url>
      <content type="html"><![CDATA[<h1 id="安装-请先卸载sendmail"><a href="#安装-请先卸载sendmail" class="headerlink" title="安装(请先卸载sendmail)"></a>安装(请先卸载sendmail)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#yum install postfix  cycus-sasl* dovecot</span></div></pre></td></tr></table></figure>
<h1 id="配置postfix"><a href="#配置postfix" class="headerlink" title="配置postfix"></a>配置postfix</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/postfix/main.cf</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">myhostname=mail.example.com</div><div class="line">mydomain=example.com</div><div class="line">myorigin = $mydomain</div><div class="line">inet_interfaces = all   ＃可以接收所有域名的邮件</div><div class="line">mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,mail.$mydomain, www.$mydomain, ftp.$mydomain</div><div class="line">local_recipient_maps =</div><div class="line">mynetworks =192.168.1.0/24,127.0.0.0/8   ＃设置内网ip</div><div class="line">relay_domains = $mydestination</div><div class="line">home_mailbox = Maildir/</div><div class="line">#关于认证</div><div class="line">smtpd_sasl_auth_enable = yes</div><div class="line">smtpd_sasl_security_options = noanonymous</div><div class="line">broken_sasl_auth_clients = yes</div><div class="line">smtpd_recipient_restrictions = permit_sasl_authenticated,reject_unauth_destination,permit_mynetworks</div><div class="line">smtpd_client_restrictions = permit_sasl_authenticated</div></pre></td></tr></table></figure>
<h1 id="配置dovecot"><a href="#配置dovecot" class="headerlink" title="配置dovecot"></a>配置dovecot</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/dovecot/dovecot.conf</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">protocols = imap pop3 lmtp</div><div class="line">listen = *</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim /etc/dovecot/conf.d/10-auth.conf</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">disable_plaintext_auth = no</div><div class="line">auth_mechanisms = plain</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim  /etc/dovecot/conf.d/10-mail.conf</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mail_location = maildir:~/Maildir</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim /etc/dovecot/conf.d/10-ssl.conf</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssl = no</div></pre></td></tr></table></figure>
<h1 id="配置sasl2"><a href="#配置sasl2" class="headerlink" title="配置sasl2"></a>配置sasl2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim /etc/sysconfig/saslauthd</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MECH=shadow  #指定以本地系统用户名认证</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim /usr/lib64/sasl2/smtpd.conf  #注意这里是64位系统，32位可能是/usr/lib/...</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pwcheck_method: saslauthd</div><div class="line">mech_list: PLAIN LOGIN</div><div class="line">log_level:3</div></pre></td></tr></table></figure>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># service postfix start</span></div><div class="line"><span class="comment"># service dovecot start</span></div><div class="line"><span class="comment">#service saslauthd start</span></div></pre></td></tr></table></figure>
<h1 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h1><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">＃useradd –s /sbin/nologin –m <span class="built_in">test</span></div><div class="line">＃passwd <span class="built_in">test</span> //密码 testtest</div></pre></td></tr></table></figure>
<p>测试用户<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">＃/usr/sbin/testsaslauthd -u <span class="built_in">test</span> -p testtest</div><div class="line">0: OK <span class="string">"Success."</span></div></pre></td></tr></table></figure></p>
<h1 id="在客户端配置"><a href="#在客户端配置" class="headerlink" title="在客户端配置"></a>在客户端配置</h1><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/test.png" alt="test"></p>
<h2 id="smtp"><a href="#smtp" class="headerlink" title="smtp"></a>smtp</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/smtp.png" alt="smtp"></p>
<h2 id="可以接收和发送"><a href="#可以接收和发送" class="headerlink" title="可以接收和发送"></a>可以接收和发送</h2><p><img src="http://7xo8j7.com1.z0.glb.clouddn.com/sample.png" alt="sample"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos搭建ftp服务]]></title>
      <url>http://grug.tech/2015/10/27/create-ftpserver-in-centos/</url>
      <content type="html"><![CDATA[<h2 id="安装vstfpd"><a href="#安装vstfpd" class="headerlink" title="安装vstfpd"></a>安装vstfpd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># yum  install  -y vsftpd;</span></div></pre></td></tr></table></figure>
<h2 id="查看配置文件"><a href="#查看配置文件" class="headerlink" title="查看配置文件"></a>查看配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># whereis vsftpd</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>可以看到以下内容<br><a href="http://grug.glovee.net/wp-content/uploads/sites/3/2015/09/20150918102724.png" target="_blank" rel="external"><img src="http://grug.glovee.net/wp-content/uploads/sites/3/2015/09/20150918102724.png" alt="20150918102724"></a><br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># cd /etc/vsftpd</span></div><div class="line"><span class="comment">#vim vsftpd.conf</span></div></pre></td></tr></table></figure></p>
<p>修改下面的内容<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">anonymous_enable=NO</div><div class="line">.....</div><div class="line">chroot_list_enable=YES</div><div class="line"><span class="comment"># (default follows)</span></div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line">allow_writeable_chroot=YES</div><div class="line">``` bash</div><div class="line"><span class="comment">## 新建ftp用户</span></div><div class="line">``` bash</div><div class="line"><span class="comment">#useradd -d /home/ftpuser -g ftp ftpuser -s /sbin/nologin</span></div><div class="line"><span class="comment">#passwd ftpuser</span></div></pre></td></tr></table></figure></p>
<h2 id="修改chroot-list文件"><a href="#修改chroot-list文件" class="headerlink" title="修改chroot_list文件"></a>修改chroot_list文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#vim chroot_list</span></div></pre></td></tr></table></figure>
<h2 id="在chroot-list添加ftpuser用户"><a href="#在chroot-list添加ftpuser用户" class="headerlink" title="在chroot_list添加ftpuser用户"></a>在chroot_list添加ftpuser用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">ftpuser</div></pre></td></tr></table></figure>
<h2 id="开启vsftpd-服务"><a href="#开启vsftpd-服务" class="headerlink" title="开启vsftpd 服务"></a>开启vsftpd 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#service vsftpd start</span></div></pre></td></tr></table></figure>
<h2 id="开机启动vsftpd"><a href="#开机启动vsftpd" class="headerlink" title="开机启动vsftpd"></a>开机启动vsftpd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment">#chkconfig vsftpd on</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
